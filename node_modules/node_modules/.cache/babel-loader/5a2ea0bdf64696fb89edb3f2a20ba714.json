{"ast":null,"code":"import { useState, useCallback, useMemo } from 'react';\nfunction toInteger(dirtyNumber) {\n  if (dirtyNumber === null || dirtyNumber === true || dirtyNumber === false) {\n    return NaN;\n  }\n  var number = Number(dirtyNumber);\n  if (isNaN(number)) {\n    return number;\n  }\n  return number < 0 ? Math.ceil(number) : Math.floor(number);\n}\nfunction requiredArgs(required, args) {\n  if (args.length < required) {\n    throw new TypeError(required + ' argument' + (required > 1 ? 's' : '') + ' required, but only ' + args.length + ' present');\n  }\n}\n\n/**\n * @name toDate\n * @category Common Helpers\n * @summary Convert the given argument to an instance of Date.\n *\n * @description\n * Convert the given argument to an instance of Date.\n *\n * If the argument is an instance of Date, the function returns its clone.\n *\n * If the argument is a number, it is treated as a timestamp.\n *\n * If the argument is none of the above, the function returns Invalid Date.\n *\n * **Note**: *all* Date arguments passed to any *date-fns* function is processed by `toDate`.\n *\n * @param {Date|Number} argument - the value to convert\n * @returns {Date} the parsed date in the local time zone\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // Clone the date:\n * const result = toDate(new Date(2014, 1, 11, 11, 30, 30))\n * //=> Tue Feb 11 2014 11:30:30\n *\n * @example\n * // Convert the timestamp to date:\n * const result = toDate(1392098430000)\n * //=> Tue Feb 11 2014 11:30:30\n */\n\nfunction toDate(argument) {\n  requiredArgs(1, arguments);\n  var argStr = Object.prototype.toString.call(argument); // Clone the date\n\n  if (argument instanceof Date || typeof argument === 'object' && argStr === '[object Date]') {\n    // Prevent the date to lose the milliseconds when passed to new Date() in IE10\n    return new Date(argument.getTime());\n  } else if (typeof argument === 'number' || argStr === '[object Number]') {\n    return new Date(argument);\n  } else {\n    if ((typeof argument === 'string' || argStr === '[object String]') && typeof console !== 'undefined') {\n      // eslint-disable-next-line no-console\n      console.warn(\"Starting with v2.0.0-beta.1 date-fns doesn't accept strings as date arguments. Please use `parseISO` to parse strings. See: https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#string-arguments\"); // eslint-disable-next-line no-console\n\n      console.warn(new Error().stack);\n    }\n    return new Date(NaN);\n  }\n}\n\n/**\n * @name addDays\n * @category Day Helpers\n * @summary Add the specified number of days to the given date.\n *\n * @description\n * Add the specified number of days to the given date.\n *\n * @param {Date|Number} date - the date to be changed\n * @param {Number} amount - the amount of days to be added. Positive decimals will be rounded using `Math.floor`, decimals less than zero will be rounded using `Math.ceil`.\n * @returns {Date} - the new date with the days added\n * @throws {TypeError} - 2 arguments required\n *\n * @example\n * // Add 10 days to 1 September 2014:\n * const result = addDays(new Date(2014, 8, 1), 10)\n * //=> Thu Sep 11 2014 00:00:00\n */\n\nfunction addDays(dirtyDate, dirtyAmount) {\n  requiredArgs(2, arguments);\n  var date = toDate(dirtyDate);\n  var amount = toInteger(dirtyAmount);\n  if (isNaN(amount)) {\n    return new Date(NaN);\n  }\n  if (!amount) {\n    // If 0 days, no-op to avoid changing times in the hour before end of DST\n    return date;\n  }\n  date.setDate(date.getDate() + amount);\n  return date;\n}\n\n/**\n * @name addMonths\n * @category Month Helpers\n * @summary Add the specified number of months to the given date.\n *\n * @description\n * Add the specified number of months to the given date.\n *\n * @param {Date|Number} date - the date to be changed\n * @param {Number} amount - the amount of months to be added. Positive decimals will be rounded using `Math.floor`, decimals less than zero will be rounded using `Math.ceil`.\n * @returns {Date} the new date with the months added\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // Add 5 months to 1 September 2014:\n * const result = addMonths(new Date(2014, 8, 1), 5)\n * //=> Sun Feb 01 2015 00:00:00\n */\n\nfunction addMonths(dirtyDate, dirtyAmount) {\n  requiredArgs(2, arguments);\n  var date = toDate(dirtyDate);\n  var amount = toInteger(dirtyAmount);\n  if (isNaN(amount)) {\n    return new Date(NaN);\n  }\n  if (!amount) {\n    // If 0 months, no-op to avoid changing times in the hour before end of DST\n    return date;\n  }\n  var dayOfMonth = date.getDate(); // The JS Date object supports date math by accepting out-of-bounds values for\n  // month, day, etc. For example, new Date(2020, 0, 0) returns 31 Dec 2019 and\n  // new Date(2020, 13, 1) returns 1 Feb 2021.  This is *almost* the behavior we\n  // want except that dates will wrap around the end of a month, meaning that\n  // new Date(2020, 13, 31) will return 3 Mar 2021 not 28 Feb 2021 as desired. So\n  // we'll default to the end of the desired month by adding 1 to the desired\n  // month and using a date of 0 to back up one day to the end of the desired\n  // month.\n\n  var endOfDesiredMonth = new Date(date.getTime());\n  endOfDesiredMonth.setMonth(date.getMonth() + amount + 1, 0);\n  var daysInMonth = endOfDesiredMonth.getDate();\n  if (dayOfMonth >= daysInMonth) {\n    // If we're already at the end of the month, then this is the correct date\n    // and we're done.\n    return endOfDesiredMonth;\n  } else {\n    // Otherwise, we now know that setting the original day-of-month value won't\n    // cause an overflow, so set the desired day-of-month. Note that we can't\n    // just set the date of `endOfDesiredMonth` because that object may have had\n    // its time changed in the unusual case where where a DST transition was on\n    // the last day of the month and its local time was in the hour skipped or\n    // repeated next to a DST transition.  So we use `date` instead which is\n    // guaranteed to still have the original time.\n    date.setFullYear(endOfDesiredMonth.getFullYear(), endOfDesiredMonth.getMonth(), dayOfMonth);\n    return date;\n  }\n}\nvar defaultOptions = {};\nfunction getDefaultOptions() {\n  return defaultOptions;\n}\n\n/**\n * @name startOfWeek\n * @category Week Helpers\n * @summary Return the start of a week for the given date.\n *\n * @description\n * Return the start of a week for the given date.\n * The result will be in the local timezone.\n *\n * @param {Date|Number} date - the original date\n * @param {Object} [options] - an object with options.\n * @param {Locale} [options.locale=defaultLocale] - the locale object. See [Locale]{@link https://date-fns.org/docs/Locale}\n * @param {0|1|2|3|4|5|6} [options.weekStartsOn=0] - the index of the first day of the week (0 - Sunday)\n * @returns {Date} the start of a week\n * @throws {TypeError} 1 argument required\n * @throws {RangeError} `options.weekStartsOn` must be between 0 and 6\n *\n * @example\n * // The start of a week for 2 September 2014 11:55:00:\n * const result = startOfWeek(new Date(2014, 8, 2, 11, 55, 0))\n * //=> Sun Aug 31 2014 00:00:00\n *\n * @example\n * // If the week starts on Monday, the start of the week for 2 September 2014 11:55:00:\n * const result = startOfWeek(new Date(2014, 8, 2, 11, 55, 0), { weekStartsOn: 1 })\n * //=> Mon Sep 01 2014 00:00:00\n */\n\nfunction startOfWeek(dirtyDate, options) {\n  var _ref, _ref2, _ref3, _options$weekStartsOn, _options$locale, _options$locale$optio, _defaultOptions$local, _defaultOptions$local2;\n  requiredArgs(1, arguments);\n  var defaultOptions = getDefaultOptions();\n  var weekStartsOn = toInteger((_ref = (_ref2 = (_ref3 = (_options$weekStartsOn = options === null || options === void 0 ? void 0 : options.weekStartsOn) !== null && _options$weekStartsOn !== void 0 ? _options$weekStartsOn : options === null || options === void 0 ? void 0 : (_options$locale = options.locale) === null || _options$locale === void 0 ? void 0 : (_options$locale$optio = _options$locale.options) === null || _options$locale$optio === void 0 ? void 0 : _options$locale$optio.weekStartsOn) !== null && _ref3 !== void 0 ? _ref3 : defaultOptions.weekStartsOn) !== null && _ref2 !== void 0 ? _ref2 : (_defaultOptions$local = defaultOptions.locale) === null || _defaultOptions$local === void 0 ? void 0 : (_defaultOptions$local2 = _defaultOptions$local.options) === null || _defaultOptions$local2 === void 0 ? void 0 : _defaultOptions$local2.weekStartsOn) !== null && _ref !== void 0 ? _ref : 0); // Test if weekStartsOn is between 0 and 6 _and_ is not NaN\n\n  if (!(weekStartsOn >= 0 && weekStartsOn <= 6)) {\n    throw new RangeError('weekStartsOn must be between 0 and 6 inclusively');\n  }\n  var date = toDate(dirtyDate);\n  var day = date.getDay();\n  var diff = (day < weekStartsOn ? 7 : 0) + day - weekStartsOn;\n  date.setDate(date.getDate() - diff);\n  date.setHours(0, 0, 0, 0);\n  return date;\n}\n\n/**\n * @name startOfDay\n * @category Day Helpers\n * @summary Return the start of a day for the given date.\n *\n * @description\n * Return the start of a day for the given date.\n * The result will be in the local timezone.\n *\n * @param {Date|Number} date - the original date\n * @returns {Date} the start of a day\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // The start of a day for 2 September 2014 11:55:00:\n * const result = startOfDay(new Date(2014, 8, 2, 11, 55, 0))\n * //=> Tue Sep 02 2014 00:00:00\n */\n\nfunction startOfDay(dirtyDate) {\n  requiredArgs(1, arguments);\n  var date = toDate(dirtyDate);\n  date.setHours(0, 0, 0, 0);\n  return date;\n}\n\n/**\n * @name addWeeks\n * @category Week Helpers\n * @summary Add the specified number of weeks to the given date.\n *\n * @description\n * Add the specified number of week to the given date.\n *\n * @param {Date|Number} date - the date to be changed\n * @param {Number} amount - the amount of weeks to be added. Positive decimals will be rounded using `Math.floor`, decimals less than zero will be rounded using `Math.ceil`.\n * @returns {Date} the new date with the weeks added\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // Add 4 weeks to 1 September 2014:\n * const result = addWeeks(new Date(2014, 8, 1), 4)\n * //=> Mon Sep 29 2014 00:00:00\n */\n\nfunction addWeeks(dirtyDate, dirtyAmount) {\n  requiredArgs(2, arguments);\n  var amount = toInteger(dirtyAmount);\n  var days = amount * 7;\n  return addDays(dirtyDate, days);\n}\n\n/**\n * @name addYears\n * @category Year Helpers\n * @summary Add the specified number of years to the given date.\n *\n * @description\n * Add the specified number of years to the given date.\n *\n * @param {Date|Number} date - the date to be changed\n * @param {Number} amount - the amount of years to be added. Positive decimals will be rounded using `Math.floor`, decimals less than zero will be rounded using `Math.ceil`.\n * @returns {Date} the new date with the years added\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // Add 5 years to 1 September 2014:\n * const result = addYears(new Date(2014, 8, 1), 5)\n * //=> Sun Sep 01 2019 00:00:00\n */\n\nfunction addYears(dirtyDate, dirtyAmount) {\n  requiredArgs(2, arguments);\n  var amount = toInteger(dirtyAmount);\n  return addMonths(dirtyDate, amount * 12);\n}\n\n/**\n * @name endOfMonth\n * @category Month Helpers\n * @summary Return the end of a month for the given date.\n *\n * @description\n * Return the end of a month for the given date.\n * The result will be in the local timezone.\n *\n * @param {Date|Number} date - the original date\n * @returns {Date} the end of a month\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // The end of a month for 2 September 2014 11:55:00:\n * const result = endOfMonth(new Date(2014, 8, 2, 11, 55, 0))\n * //=> Tue Sep 30 2014 23:59:59.999\n */\n\nfunction endOfMonth(dirtyDate) {\n  requiredArgs(1, arguments);\n  var date = toDate(dirtyDate);\n  var month = date.getMonth();\n  date.setFullYear(date.getFullYear(), month + 1, 0);\n  date.setHours(23, 59, 59, 999);\n  return date;\n}\n\n/**\n * @name eachDayOfInterval\n * @category Interval Helpers\n * @summary Return the array of dates within the specified time interval.\n *\n * @description\n * Return the array of dates within the specified time interval.\n *\n * @param {Interval} interval - the interval. See [Interval]{@link https://date-fns.org/docs/Interval}\n * @param {Object} [options] - an object with options.\n * @param {Number} [options.step=1] - the step to increment by. The value should be more than 1.\n * @returns {Date[]} the array with starts of days from the day of the interval start to the day of the interval end\n * @throws {TypeError} 1 argument required\n * @throws {RangeError} `options.step` must be a number greater than 1\n * @throws {RangeError} The start of an interval cannot be after its end\n * @throws {RangeError} Date in interval cannot be `Invalid Date`\n *\n * @example\n * // Each day between 6 October 2014 and 10 October 2014:\n * const result = eachDayOfInterval({\n *   start: new Date(2014, 9, 6),\n *   end: new Date(2014, 9, 10)\n * })\n * //=> [\n * //   Mon Oct 06 2014 00:00:00,\n * //   Tue Oct 07 2014 00:00:00,\n * //   Wed Oct 08 2014 00:00:00,\n * //   Thu Oct 09 2014 00:00:00,\n * //   Fri Oct 10 2014 00:00:00\n * // ]\n */\n\nfunction eachDayOfInterval(dirtyInterval, options) {\n  var _options$step;\n  requiredArgs(1, arguments);\n  var interval = dirtyInterval || {};\n  var startDate = toDate(interval.start);\n  var endDate = toDate(interval.end);\n  var endTime = endDate.getTime(); // Throw an exception if start date is after end date or if any date is `Invalid Date`\n\n  if (!(startDate.getTime() <= endTime)) {\n    throw new RangeError('Invalid interval');\n  }\n  var dates = [];\n  var currentDate = startDate;\n  currentDate.setHours(0, 0, 0, 0);\n  var step = Number((_options$step = options === null || options === void 0 ? void 0 : options.step) !== null && _options$step !== void 0 ? _options$step : 1);\n  if (step < 1 || isNaN(step)) throw new RangeError('`options.step` must be a number greater than 1');\n  while (currentDate.getTime() <= endTime) {\n    dates.push(toDate(currentDate));\n    currentDate.setDate(currentDate.getDate() + step);\n    currentDate.setHours(0, 0, 0, 0);\n  }\n  return dates;\n}\n\n/**\n * @name eachMonthOfInterval\n * @category Interval Helpers\n * @summary Return the array of months within the specified time interval.\n *\n * @description\n * Return the array of months within the specified time interval.\n *\n * @param {Interval} interval - the interval. See [Interval]{@link https://date-fns.org/docs/Interval}\n * @returns {Date[]} the array with starts of months from the month of the interval start to the month of the interval end\n * @throws {TypeError} 1 argument required\n * @throws {RangeError} The start of an interval cannot be after its end\n * @throws {RangeError} Date in interval cannot be `Invalid Date`\n *\n * @example\n * // Each month between 6 February 2014 and 10 August 2014:\n * const result = eachMonthOfInterval({\n *   start: new Date(2014, 1, 6),\n *   end: new Date(2014, 7, 10)\n * })\n * //=> [\n * //   Sat Feb 01 2014 00:00:00,\n * //   Sat Mar 01 2014 00:00:00,\n * //   Tue Apr 01 2014 00:00:00,\n * //   Thu May 01 2014 00:00:00,\n * //   Sun Jun 01 2014 00:00:00,\n * //   Tue Jul 01 2014 00:00:00,\n * //   Fri Aug 01 2014 00:00:00\n * // ]\n */\n\nfunction eachMonthOfInterval(dirtyInterval) {\n  requiredArgs(1, arguments);\n  var interval = dirtyInterval || {};\n  var startDate = toDate(interval.start);\n  var endDate = toDate(interval.end);\n  var endTime = endDate.getTime();\n  var dates = []; // Throw an exception if start date is after end date or if any date is `Invalid Date`\n\n  if (!(startDate.getTime() <= endTime)) {\n    throw new RangeError('Invalid interval');\n  }\n  var currentDate = startDate;\n  currentDate.setHours(0, 0, 0, 0);\n  currentDate.setDate(1);\n  while (currentDate.getTime() <= endTime) {\n    dates.push(toDate(currentDate));\n    currentDate.setMonth(currentDate.getMonth() + 1);\n  }\n  return dates;\n}\n\n/**\n * @name eachWeekOfInterval\n * @category Interval Helpers\n * @summary Return the array of weeks within the specified time interval.\n *\n * @description\n * Return the array of weeks within the specified time interval.\n *\n * @param {Interval} interval - the interval. See [Interval]{@link https://date-fns.org/docs/Interval}\n * @param {Object} [options] - an object with options.\n * @param {Locale} [options.locale=defaultLocale] - the locale object. See [Locale]{@link https://date-fns.org/docs/Locale}\n * @param {0|1|2|3|4|5|6} [options.weekStartsOn=0] - the index of the first day of the week (0 - Sunday)\n * @returns {Date[]} the array with starts of weeks from the week of the interval start to the week of the interval end\n * @throws {TypeError} 1 argument required\n * @throws {RangeError} `options.weekStartsOn` must be 0, 1, ..., 6\n * @throws {RangeError} The start of an interval cannot be after its end\n * @throws {RangeError} Date in interval cannot be `Invalid Date`\n *\n * @example\n * // Each week within interval 6 October 2014 - 23 November 2014:\n * const result = eachWeekOfInterval({\n *   start: new Date(2014, 9, 6),\n *   end: new Date(2014, 10, 23)\n * })\n * //=> [\n * //   Sun Oct 05 2014 00:00:00,\n * //   Sun Oct 12 2014 00:00:00,\n * //   Sun Oct 19 2014 00:00:00,\n * //   Sun Oct 26 2014 00:00:00,\n * //   Sun Nov 02 2014 00:00:00,\n * //   Sun Nov 09 2014 00:00:00,\n * //   Sun Nov 16 2014 00:00:00,\n * //   Sun Nov 23 2014 00:00:00\n * // ]\n */\n\nfunction eachWeekOfInterval(dirtyInterval, options) {\n  requiredArgs(1, arguments);\n  var interval = dirtyInterval || {};\n  var startDate = toDate(interval.start);\n  var endDate = toDate(interval.end);\n  var endTime = endDate.getTime(); // Throw an exception if start date is after end date or if any date is `Invalid Date`\n\n  if (!(startDate.getTime() <= endTime)) {\n    throw new RangeError('Invalid interval');\n  }\n  var startDateWeek = startOfWeek(startDate, options);\n  var endDateWeek = startOfWeek(endDate, options); // Some timezones switch DST at midnight, making start of day unreliable in these timezones, 3pm is a safe bet\n\n  startDateWeek.setHours(15);\n  endDateWeek.setHours(15);\n  endTime = endDateWeek.getTime();\n  var weeks = [];\n  var currentWeek = startDateWeek;\n  while (currentWeek.getTime() <= endTime) {\n    currentWeek.setHours(0);\n    weeks.push(toDate(currentWeek));\n    currentWeek = addWeeks(currentWeek, 1);\n    currentWeek.setHours(15);\n  }\n  return weeks;\n}\n\n/**\n * @name startOfMonth\n * @category Month Helpers\n * @summary Return the start of a month for the given date.\n *\n * @description\n * Return the start of a month for the given date.\n * The result will be in the local timezone.\n *\n * @param {Date|Number} date - the original date\n * @returns {Date} the start of a month\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // The start of a month for 2 September 2014 11:55:00:\n * const result = startOfMonth(new Date(2014, 8, 2, 11, 55, 0))\n * //=> Mon Sep 01 2014 00:00:00\n */\n\nfunction startOfMonth(dirtyDate) {\n  requiredArgs(1, arguments);\n  var date = toDate(dirtyDate);\n  date.setDate(1);\n  date.setHours(0, 0, 0, 0);\n  return date;\n}\n\n/**\n * @name endOfWeek\n * @category Week Helpers\n * @summary Return the end of a week for the given date.\n *\n * @description\n * Return the end of a week for the given date.\n * The result will be in the local timezone.\n *\n * @param {Date|Number} date - the original date\n * @param {Object} [options] - an object with options.\n * @param {Locale} [options.locale=defaultLocale] - the locale object. See [Locale]{@link https://date-fns.org/docs/Locale}\n * @param {0|1|2|3|4|5|6} [options.weekStartsOn=0] - the index of the first day of the week (0 - Sunday)\n * @returns {Date} the end of a week\n * @throws {TypeError} 1 argument required\n * @throws {RangeError} `options.weekStartsOn` must be between 0 and 6\n *\n * @example\n * // The end of a week for 2 September 2014 11:55:00:\n * const result = endOfWeek(new Date(2014, 8, 2, 11, 55, 0))\n * //=> Sat Sep 06 2014 23:59:59.999\n *\n * @example\n * // If the week starts on Monday, the end of the week for 2 September 2014 11:55:00:\n * const result = endOfWeek(new Date(2014, 8, 2, 11, 55, 0), { weekStartsOn: 1 })\n * //=> Sun Sep 07 2014 23:59:59.999\n */\nfunction endOfWeek(dirtyDate, options) {\n  var _ref, _ref2, _ref3, _options$weekStartsOn, _options$locale, _options$locale$optio, _defaultOptions$local, _defaultOptions$local2;\n  requiredArgs(1, arguments);\n  var defaultOptions = getDefaultOptions();\n  var weekStartsOn = toInteger((_ref = (_ref2 = (_ref3 = (_options$weekStartsOn = options === null || options === void 0 ? void 0 : options.weekStartsOn) !== null && _options$weekStartsOn !== void 0 ? _options$weekStartsOn : options === null || options === void 0 ? void 0 : (_options$locale = options.locale) === null || _options$locale === void 0 ? void 0 : (_options$locale$optio = _options$locale.options) === null || _options$locale$optio === void 0 ? void 0 : _options$locale$optio.weekStartsOn) !== null && _ref3 !== void 0 ? _ref3 : defaultOptions.weekStartsOn) !== null && _ref2 !== void 0 ? _ref2 : (_defaultOptions$local = defaultOptions.locale) === null || _defaultOptions$local === void 0 ? void 0 : (_defaultOptions$local2 = _defaultOptions$local.options) === null || _defaultOptions$local2 === void 0 ? void 0 : _defaultOptions$local2.weekStartsOn) !== null && _ref !== void 0 ? _ref : 0); // Test if weekStartsOn is between 0 and 6 _and_ is not NaN\n\n  if (!(weekStartsOn >= 0 && weekStartsOn <= 6)) {\n    throw new RangeError('weekStartsOn must be between 0 and 6 inclusively');\n  }\n  var date = toDate(dirtyDate);\n  var day = date.getDay();\n  var diff = (day < weekStartsOn ? -7 : 0) + 6 - (day - weekStartsOn);\n  date.setDate(date.getDate() + diff);\n  date.setHours(23, 59, 59, 999);\n  return date;\n}\n\n/**\n * @name getDaysInMonth\n * @category Month Helpers\n * @summary Get the number of days in a month of the given date.\n *\n * @description\n * Get the number of days in a month of the given date.\n *\n * @param {Date|Number} date - the given date\n * @returns {Number} the number of days in a month\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // How many days are in February 2000?\n * const result = getDaysInMonth(new Date(2000, 1))\n * //=> 29\n */\n\nfunction getDaysInMonth(dirtyDate) {\n  requiredArgs(1, arguments);\n  var date = toDate(dirtyDate);\n  var year = date.getFullYear();\n  var monthIndex = date.getMonth();\n  var lastDayOfMonth = new Date(0);\n  lastDayOfMonth.setFullYear(year, monthIndex + 1, 0);\n  lastDayOfMonth.setHours(0, 0, 0, 0);\n  return lastDayOfMonth.getDate();\n}\n\n/**\n * @name isAfter\n * @category Common Helpers\n * @summary Is the first date after the second one?\n *\n * @description\n * Is the first date after the second one?\n *\n * @param {Date|Number} date - the date that should be after the other one to return true\n * @param {Date|Number} dateToCompare - the date to compare with\n * @returns {Boolean} the first date is after the second date\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // Is 10 July 1989 after 11 February 1987?\n * const result = isAfter(new Date(1989, 6, 10), new Date(1987, 1, 11))\n * //=> true\n */\n\nfunction isAfter(dirtyDate, dirtyDateToCompare) {\n  requiredArgs(2, arguments);\n  var date = toDate(dirtyDate);\n  var dateToCompare = toDate(dirtyDateToCompare);\n  return date.getTime() > dateToCompare.getTime();\n}\n\n/**\n * @name isBefore\n * @category Common Helpers\n * @summary Is the first date before the second one?\n *\n * @description\n * Is the first date before the second one?\n *\n * @param {Date|Number} date - the date that should be before the other one to return true\n * @param {Date|Number} dateToCompare - the date to compare with\n * @returns {Boolean} the first date is before the second date\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // Is 10 July 1989 before 11 February 1987?\n * const result = isBefore(new Date(1989, 6, 10), new Date(1987, 1, 11))\n * //=> false\n */\n\nfunction isBefore(dirtyDate, dirtyDateToCompare) {\n  requiredArgs(2, arguments);\n  var date = toDate(dirtyDate);\n  var dateToCompare = toDate(dirtyDateToCompare);\n  return date.getTime() < dateToCompare.getTime();\n}\n\n/**\n * @name isEqual\n * @category Common Helpers\n * @summary Are the given dates equal?\n *\n * @description\n * Are the given dates equal?\n *\n * @param {Date|Number} dateLeft - the first date to compare\n * @param {Date|Number} dateRight - the second date to compare\n * @returns {Boolean} the dates are equal\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // Are 2 July 2014 06:30:45.000 and 2 July 2014 06:30:45.500 equal?\n * const result = isEqual(\n *   new Date(2014, 6, 2, 6, 30, 45, 0),\n *   new Date(2014, 6, 2, 6, 30, 45, 500)\n * )\n * //=> false\n */\n\nfunction isEqual(dirtyLeftDate, dirtyRightDate) {\n  requiredArgs(2, arguments);\n  var dateLeft = toDate(dirtyLeftDate);\n  var dateRight = toDate(dirtyRightDate);\n  return dateLeft.getTime() === dateRight.getTime();\n}\n\n/**\n * @name setMonth\n * @category Month Helpers\n * @summary Set the month to the given date.\n *\n * @description\n * Set the month to the given date.\n *\n * @param {Date|Number} date - the date to be changed\n * @param {Number} month - the month of the new date\n * @returns {Date} the new date with the month set\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // Set February to 1 September 2014:\n * const result = setMonth(new Date(2014, 8, 1), 1)\n * //=> Sat Feb 01 2014 00:00:00\n */\n\nfunction setMonth(dirtyDate, dirtyMonth) {\n  requiredArgs(2, arguments);\n  var date = toDate(dirtyDate);\n  var month = toInteger(dirtyMonth);\n  var year = date.getFullYear();\n  var day = date.getDate();\n  var dateWithDesiredMonth = new Date(0);\n  dateWithDesiredMonth.setFullYear(year, month, 15);\n  dateWithDesiredMonth.setHours(0, 0, 0, 0);\n  var daysInMonth = getDaysInMonth(dateWithDesiredMonth); // Set the last day of the new month\n  // if the original date was the last day of the longer month\n\n  date.setMonth(month, Math.min(day, daysInMonth));\n  return date;\n}\n\n/**\n * @name set\n * @category Common Helpers\n * @summary Set date values to a given date.\n *\n * @description\n * Set date values to a given date.\n *\n * Sets time values to date from object `values`.\n * A value is not set if it is undefined or null or doesn't exist in `values`.\n *\n * Note about bundle size: `set` does not internally use `setX` functions from date-fns but instead opts\n * to use native `Date#setX` methods. If you use this function, you may not want to include the\n * other `setX` functions that date-fns provides if you are concerned about the bundle size.\n *\n * @param {Date|Number} date - the date to be changed\n * @param {Object} values - an object with options\n * @param {Number} [values.year] - the number of years to be set\n * @param {Number} [values.month] - the number of months to be set\n * @param {Number} [values.date] - the number of days to be set\n * @param {Number} [values.hours] - the number of hours to be set\n * @param {Number} [values.minutes] - the number of minutes to be set\n * @param {Number} [values.seconds] - the number of seconds to be set\n * @param {Number} [values.milliseconds] - the number of milliseconds to be set\n * @returns {Date} the new date with options set\n * @throws {TypeError} 2 arguments required\n * @throws {RangeError} `values` must be an object\n *\n * @example\n * // Transform 1 September 2014 into 20 October 2015 in a single line:\n * const result = set(new Date(2014, 8, 20), { year: 2015, month: 9, date: 20 })\n * //=> Tue Oct 20 2015 00:00:00\n *\n * @example\n * // Set 12 PM to 1 September 2014 01:23:45 to 1 September 2014 12:00:00:\n * const result = set(new Date(2014, 8, 1, 1, 23, 45), { hours: 12 })\n * //=> Mon Sep 01 2014 12:23:45\n */\nfunction set(dirtyDate, values) {\n  requiredArgs(2, arguments);\n  if (typeof values !== 'object' || values === null) {\n    throw new RangeError('values parameter must be an object');\n  }\n  var date = toDate(dirtyDate); // Check if date is Invalid Date because Date.prototype.setFullYear ignores the value of Invalid Date\n\n  if (isNaN(date.getTime())) {\n    return new Date(NaN);\n  }\n  if (values.year != null) {\n    date.setFullYear(values.year);\n  }\n  if (values.month != null) {\n    date = setMonth(date, values.month);\n  }\n  if (values.date != null) {\n    date.setDate(toInteger(values.date));\n  }\n  if (values.hours != null) {\n    date.setHours(toInteger(values.hours));\n  }\n  if (values.minutes != null) {\n    date.setMinutes(toInteger(values.minutes));\n  }\n  if (values.seconds != null) {\n    date.setSeconds(toInteger(values.seconds));\n  }\n  if (values.milliseconds != null) {\n    date.setMilliseconds(toInteger(values.milliseconds));\n  }\n  return date;\n}\n\n/**\n * @name setYear\n * @category Year Helpers\n * @summary Set the year to the given date.\n *\n * @description\n * Set the year to the given date.\n *\n * @param {Date|Number} date - the date to be changed\n * @param {Number} year - the year of the new date\n * @returns {Date} the new date with the year set\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // Set year 2013 to 1 September 2014:\n * const result = setYear(new Date(2014, 8, 1), 2013)\n * //=> Sun Sep 01 2013 00:00:00\n */\n\nfunction setYear(dirtyDate, dirtyYear) {\n  requiredArgs(2, arguments);\n  var date = toDate(dirtyDate);\n  var year = toInteger(dirtyYear); // Check if date is Invalid Date because Date.prototype.setFullYear ignores the value of Invalid Date\n\n  if (isNaN(date.getTime())) {\n    return new Date(NaN);\n  }\n  date.setFullYear(year);\n  return date;\n}\n\n/**\n * @name startOfToday\n * @category Day Helpers\n * @summary Return the start of today.\n * @pure false\n *\n * @description\n * Return the start of today.\n *\n * > ⚠️ Please note that this function is not present in the FP submodule as\n * > it uses `Date.now()` internally hence impure and can't be safely curried.\n *\n * @returns {Date} the start of today\n *\n * @example\n * // If today is 6 October 2014:\n * const result = startOfToday()\n * //=> Mon Oct 6 2014 00:00:00\n */\n\nfunction startOfToday() {\n  return startOfDay(Date.now());\n}\n\n/**\n * @name subMonths\n * @category Month Helpers\n * @summary Subtract the specified number of months from the given date.\n *\n * @description\n * Subtract the specified number of months from the given date.\n *\n * @param {Date|Number} date - the date to be changed\n * @param {Number} amount - the amount of months to be subtracted. Positive decimals will be rounded using `Math.floor`, decimals less than zero will be rounded using `Math.ceil`.\n * @returns {Date} the new date with the months subtracted\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // Subtract 5 months from 1 February 2015:\n * const result = subMonths(new Date(2015, 1, 1), 5)\n * //=> Mon Sep 01 2014 00:00:00\n */\n\nfunction subMonths(dirtyDate, dirtyAmount) {\n  requiredArgs(2, arguments);\n  var amount = toInteger(dirtyAmount);\n  return addMonths(dirtyDate, -amount);\n}\n\n/**\n * @name subYears\n * @category Year Helpers\n * @summary Subtract the specified number of years from the given date.\n *\n * @description\n * Subtract the specified number of years from the given date.\n *\n * @param {Date|Number} date - the date to be changed\n * @param {Number} amount - the amount of years to be subtracted. Positive decimals will be rounded using `Math.floor`, decimals less than zero will be rounded using `Math.ceil`.\n * @returns {Date} the new date with the years subtracted\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // Subtract 5 years from 1 September 2014:\n * const result = subYears(new Date(2014, 8, 1), 5)\n * //=> Tue Sep 01 2009 00:00:00\n */\n\nfunction subYears(dirtyDate, dirtyAmount) {\n  requiredArgs(2, arguments);\n  var amount = toInteger(dirtyAmount);\n  return addYears(dirtyDate, -amount);\n}\nvar Month;\n(function (Month) {\n  Month[Month[\"JANUARY\"] = 0] = \"JANUARY\";\n  Month[Month[\"FEBRUARY\"] = 1] = \"FEBRUARY\";\n  Month[Month[\"MARCH\"] = 2] = \"MARCH\";\n  Month[Month[\"APRIL\"] = 3] = \"APRIL\";\n  Month[Month[\"MAY\"] = 4] = \"MAY\";\n  Month[Month[\"JUNE\"] = 5] = \"JUNE\";\n  Month[Month[\"JULY\"] = 6] = \"JULY\";\n  Month[Month[\"AUGUST\"] = 7] = \"AUGUST\";\n  Month[Month[\"SEPTEMBER\"] = 8] = \"SEPTEMBER\";\n  Month[Month[\"OCTOBER\"] = 9] = \"OCTOBER\";\n  Month[Month[\"NOVEMBER\"] = 10] = \"NOVEMBER\";\n  Month[Month[\"DECEMBER\"] = 11] = \"DECEMBER\";\n})(Month || (Month = {}));\nvar Day;\n(function (Day) {\n  Day[Day[\"SUNDAY\"] = 0] = \"SUNDAY\";\n  Day[Day[\"MONDAY\"] = 1] = \"MONDAY\";\n  Day[Day[\"TUESDAY\"] = 2] = \"TUESDAY\";\n  Day[Day[\"WEDNESDAY\"] = 3] = \"WEDNESDAY\";\n  Day[Day[\"THURSDAY\"] = 4] = \"THURSDAY\";\n  Day[Day[\"FRIDAY\"] = 5] = \"FRIDAY\";\n  Day[Day[\"SATURDAY\"] = 6] = \"SATURDAY\";\n})(Day || (Day = {}));\nvar inRange = function (date, min, max) {\n  return (isEqual(date, min) || isAfter(date, min)) && (isEqual(date, max) || isBefore(date, max));\n};\nvar clearTime = function (date) {\n  return set(date, {\n    hours: 0,\n    minutes: 0,\n    seconds: 0,\n    milliseconds: 0\n  });\n};\nvar useLilius = function (_a) {\n  var _b = _a === void 0 ? {} : _a,\n    _c = _b.weekStartsOn,\n    weekStartsOn = _c === void 0 ? Day.SUNDAY : _c,\n    _d = _b.viewing,\n    initialViewing = _d === void 0 ? new Date() : _d,\n    _e = _b.selected,\n    initialSelected = _e === void 0 ? [] : _e,\n    _f = _b.numberOfMonths,\n    numberOfMonths = _f === void 0 ? 1 : _f;\n  var _g = useState(initialViewing),\n    viewing = _g[0],\n    setViewing = _g[1];\n  var viewToday = useCallback(function () {\n    return setViewing(startOfToday());\n  }, [setViewing]);\n  var viewMonth = useCallback(function (month) {\n    return setViewing(function (v) {\n      return setMonth(v, month);\n    });\n  }, []);\n  var viewPreviousMonth = useCallback(function () {\n    return setViewing(function (v) {\n      return subMonths(v, 1);\n    });\n  }, []);\n  var viewNextMonth = useCallback(function () {\n    return setViewing(function (v) {\n      return addMonths(v, 1);\n    });\n  }, []);\n  var viewYear = useCallback(function (year) {\n    return setViewing(function (v) {\n      return setYear(v, year);\n    });\n  }, []);\n  var viewPreviousYear = useCallback(function () {\n    return setViewing(function (v) {\n      return subYears(v, 1);\n    });\n  }, []);\n  var viewNextYear = useCallback(function () {\n    return setViewing(function (v) {\n      return addYears(v, 1);\n    });\n  }, []);\n  var _h = useState(initialSelected.map(clearTime)),\n    selected = _h[0],\n    setSelected = _h[1];\n  var clearSelected = function () {\n    return setSelected([]);\n  };\n  var isSelected = useCallback(function (date) {\n    return selected.findIndex(function (s) {\n      return isEqual(s, date);\n    }) > -1;\n  }, [selected]);\n  var select = useCallback(function (date, replaceExisting) {\n    if (replaceExisting) {\n      setSelected(Array.isArray(date) ? date : [date]);\n    } else {\n      setSelected(function (selectedItems) {\n        return selectedItems.concat(Array.isArray(date) ? date : [date]);\n      });\n    }\n  }, []);\n  var deselect = useCallback(function (date) {\n    return setSelected(function (selectedItems) {\n      return Array.isArray(date) ? selectedItems.filter(function (s) {\n        return !date.map(function (d) {\n          return d.getTime();\n        }).includes(s.getTime());\n      }) : selectedItems.filter(function (s) {\n        return !isEqual(s, date);\n      });\n    });\n  }, []);\n  var toggle = useCallback(function (date, replaceExisting) {\n    return isSelected(date) ? deselect(date) : select(date, replaceExisting);\n  }, [deselect, isSelected, select]);\n  var selectRange = useCallback(function (start, end, replaceExisting) {\n    if (replaceExisting) {\n      setSelected(eachDayOfInterval({\n        start: start,\n        end: end\n      }));\n    } else {\n      setSelected(function (selectedItems) {\n        return selectedItems.concat(eachDayOfInterval({\n          start: start,\n          end: end\n        }));\n      });\n    }\n  }, []);\n  var deselectRange = useCallback(function (start, end) {\n    setSelected(function (selectedItems) {\n      return selectedItems.filter(function (s) {\n        return !eachDayOfInterval({\n          start: start,\n          end: end\n        }).map(function (d) {\n          return d.getTime();\n        }).includes(s.getTime());\n      });\n    });\n  }, []);\n  var calendar = useMemo(function () {\n    return eachMonthOfInterval({\n      start: startOfMonth(viewing),\n      end: endOfMonth(addMonths(viewing, numberOfMonths - 1))\n    }).map(function (month) {\n      return eachWeekOfInterval({\n        start: startOfMonth(month),\n        end: endOfMonth(month)\n      }, {\n        weekStartsOn: weekStartsOn\n      }).map(function (week) {\n        return eachDayOfInterval({\n          start: startOfWeek(week, {\n            weekStartsOn: weekStartsOn\n          }),\n          end: endOfWeek(week, {\n            weekStartsOn: weekStartsOn\n          })\n        });\n      });\n    });\n  }, [viewing, weekStartsOn, numberOfMonths]);\n  return {\n    clearTime: clearTime,\n    inRange: inRange,\n    viewing: viewing,\n    setViewing: setViewing,\n    viewToday: viewToday,\n    viewMonth: viewMonth,\n    viewPreviousMonth: viewPreviousMonth,\n    viewNextMonth: viewNextMonth,\n    viewYear: viewYear,\n    viewPreviousYear: viewPreviousYear,\n    viewNextYear: viewNextYear,\n    selected: selected,\n    setSelected: setSelected,\n    clearSelected: clearSelected,\n    isSelected: isSelected,\n    select: select,\n    deselect: deselect,\n    toggle: toggle,\n    selectRange: selectRange,\n    deselectRange: deselectRange,\n    calendar: calendar\n  };\n};\nexport { Day, Month, useLilius };","map":{"version":3,"mappings":";AAAe,SAASA,SAAS,CAACC,WAAW,EAAE;EAC7C,IAAIA,WAAW,KAAK,IAAI,IAAIA,WAAW,KAAK,IAAI,IAAIA,WAAW,KAAK,KAAK,EAAE;IACzE,OAAOC,GAAG;EACd;EAEE,IAAIC,MAAM,GAAGC,MAAM,CAACH,WAAW,CAAC;EAEhC,IAAII,KAAK,CAACF,MAAM,CAAC,EAAE;IACjB,OAAOA,MAAM;EACjB;EAEE,OAAOA,MAAM,GAAG,CAAC,GAAGG,IAAI,CAACC,IAAI,CAACJ,MAAM,CAAC,GAAGG,IAAI,CAACE,KAAK,CAACL,MAAM,CAAC;AAC5D;ACZe,SAASM,YAAY,CAACC,QAAQ,EAAEC,IAAI,EAAE;EACnD,IAAIA,IAAI,CAACC,MAAM,GAAGF,QAAQ,EAAE;IAC1B,MAAM,IAAIG,SAAS,CAACH,QAAQ,GAAG,WAAW,IAAIA,QAAQ,GAAG,CAAC,GAAG,GAAG,GAAG,EAAE,CAAC,GAAG,sBAAsB,GAAGC,IAAI,CAACC,MAAM,GAAG,UAAU,CAAC;EAC/H;AACA;;ACHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEe,SAASE,MAAM,CAACC,QAAQ,EAAE;EACvCN,YAAY,CAAC,CAAC,EAAEO,SAAS,CAAC;EAC1B,IAAIC,MAAM,GAAGC,MAAM,CAACC,SAAS,CAACC,QAAQ,CAACC,IAAI,CAACN,QAAQ,CAAC,CAAC;;EAEtD,IAAIA,QAAQ,YAAYO,IAAI,IAAI,OAAOP,QAAQ,KAAK,QAAQ,IAAIE,MAAM,KAAK,eAAe,EAAE;IAC9F;IACI,OAAO,IAAIK,IAAI,CAACP,QAAQ,CAACQ,OAAO,EAAE,CAAC;EACvC,CAAG,MAAM,IAAI,OAAOR,QAAQ,KAAK,QAAQ,IAAIE,MAAM,KAAK,iBAAiB,EAAE;IACvE,OAAO,IAAIK,IAAI,CAACP,QAAQ,CAAC;EAC7B,CAAG,MAAM;IACL,IAAI,CAAC,OAAOA,QAAQ,KAAK,QAAQ,IAAIE,MAAM,KAAK,iBAAiB,KAAK,OAAOO,OAAO,KAAK,WAAW,EAAE;MAC1G;MACMA,OAAO,CAACC,IAAI,CAAC,oNAAoN,CAAC,CAAC;;MAEnOD,OAAO,CAACC,IAAI,CAAC,IAAIC,KAAK,EAAE,CAACC,KAAK,CAAC;IACrC;IAEI,OAAO,IAAIL,IAAI,CAACpB,GAAG,CAAC;EACxB;AACA;;AChDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEe,SAAS0B,OAAO,CAACC,SAAS,EAAEC,WAAW,EAAE;EACtDrB,YAAY,CAAC,CAAC,EAAEO,SAAS,CAAC;EAC1B,IAAIe,IAAI,GAAGjB,MAAM,CAACe,SAAS,CAAC;EAC5B,IAAIG,MAAM,GAAGhC,SAAS,CAAC8B,WAAW,CAAC;EAEnC,IAAIzB,KAAK,CAAC2B,MAAM,CAAC,EAAE;IACjB,OAAO,IAAIV,IAAI,CAACpB,GAAG,CAAC;EACxB;EAEE,IAAI,CAAC8B,MAAM,EAAE;IACf;IACI,OAAOD,IAAI;EACf;EAEEA,IAAI,CAACE,OAAO,CAACF,IAAI,CAACG,OAAO,EAAE,GAAGF,MAAM,CAAC;EACrC,OAAOD,IAAI;AACb;;ACnCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEe,SAASI,SAAS,CAACN,SAAS,EAAEC,WAAW,EAAE;EACxDrB,YAAY,CAAC,CAAC,EAAEO,SAAS,CAAC;EAC1B,IAAIe,IAAI,GAAGjB,MAAM,CAACe,SAAS,CAAC;EAC5B,IAAIG,MAAM,GAAGhC,SAAS,CAAC8B,WAAW,CAAC;EAEnC,IAAIzB,KAAK,CAAC2B,MAAM,CAAC,EAAE;IACjB,OAAO,IAAIV,IAAI,CAACpB,GAAG,CAAC;EACxB;EAEE,IAAI,CAAC8B,MAAM,EAAE;IACf;IACI,OAAOD,IAAI;EACf;EAEE,IAAIK,UAAU,GAAGL,IAAI,CAACG,OAAO,EAAE,CAAC;EAClC;EACA;EACA;EACA;EACA;EACA;EACA;;EAEE,IAAIG,iBAAiB,GAAG,IAAIf,IAAI,CAACS,IAAI,CAACR,OAAO,EAAE,CAAC;EAChDc,iBAAiB,CAACC,QAAQ,CAACP,IAAI,CAACQ,QAAQ,EAAE,GAAGP,MAAM,GAAG,CAAC,EAAE,CAAC,CAAC;EAC3D,IAAIQ,WAAW,GAAGH,iBAAiB,CAACH,OAAO,EAAE;EAE7C,IAAIE,UAAU,IAAII,WAAW,EAAE;IACjC;IACA;IACI,OAAOH,iBAAiB;EAC5B,CAAG,MAAM;IACT;IACA;IACA;IACA;IACA;IACA;IACA;IACIN,IAAI,CAACU,WAAW,CAACJ,iBAAiB,CAACK,WAAW,EAAE,EAAEL,iBAAiB,CAACE,QAAQ,EAAE,EAAEH,UAAU,CAAC;IAC3F,OAAOL,IAAI;EACf;AACA;AChEA,IAAIY,cAAc,GAAG,EAAE;AAChB,SAASC,iBAAiB,GAAG;EAClC,OAAOD,cAAc;AACvB;;ACCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEe,SAASE,WAAW,CAAChB,SAAS,EAAEiB,OAAO,EAAE;EACtD,IAAIC,IAAI,EAAEC,KAAK,EAAEC,KAAK,EAAEC,qBAAqB,EAAEC,eAAe,EAAEC,qBAAqB,EAAEC,qBAAqB,EAAEC,sBAAsB;EAEpI7C,YAAY,CAAC,CAAC,EAAEO,SAAS,CAAC;EAC1B,IAAI2B,cAAc,GAAGC,iBAAiB,EAAE;EACxC,IAAIW,YAAY,GAAGvD,SAAS,CAAC,CAAC+C,IAAI,GAAG,CAACC,KAAK,GAAG,CAACC,KAAK,GAAG,CAACC,qBAAqB,GAAGJ,OAAO,KAAK,IAAI,IAAIA,OAAO,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,OAAO,CAACS,YAAY,MAAM,IAAI,IAAIL,qBAAqB,KAAK,KAAK,CAAC,GAAGA,qBAAqB,GAAGJ,OAAO,KAAK,IAAI,IAAIA,OAAO,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAG,CAACK,eAAe,GAAGL,OAAO,CAACU,MAAM,MAAM,IAAI,IAAIL,eAAe,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAG,CAACC,qBAAqB,GAAGD,eAAe,CAACL,OAAO,MAAM,IAAI,IAAIM,qBAAqB,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,qBAAqB,CAACG,YAAY,MAAM,IAAI,IAAIN,KAAK,KAAK,KAAK,CAAC,GAAGA,KAAK,GAAGN,cAAc,CAACY,YAAY,MAAM,IAAI,IAAIP,KAAK,KAAK,KAAK,CAAC,GAAGA,KAAK,GAAG,CAACK,qBAAqB,GAAGV,cAAc,CAACa,MAAM,MAAM,IAAI,IAAIH,qBAAqB,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAG,CAACC,sBAAsB,GAAGD,qBAAqB,CAACP,OAAO,MAAM,IAAI,IAAIQ,sBAAsB,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,sBAAsB,CAACC,YAAY,MAAM,IAAI,IAAIR,IAAI,KAAK,KAAK,CAAC,GAAGA,IAAI,GAAG,CAAC,CAAC,CAAC;;EAEt4B,IAAI,EAAEQ,YAAY,IAAI,CAAC,IAAIA,YAAY,IAAI,CAAC,CAAC,EAAE;IAC7C,MAAM,IAAIE,UAAU,CAAC,kDAAkD,CAAC;EAC5E;EAEE,IAAI1B,IAAI,GAAGjB,MAAM,CAACe,SAAS,CAAC;EAC5B,IAAI6B,GAAG,GAAG3B,IAAI,CAAC4B,MAAM,EAAE;EACvB,IAAIC,IAAI,GAAG,CAACF,GAAG,GAAGH,YAAY,GAAG,CAAC,GAAG,CAAC,IAAIG,GAAG,GAAGH,YAAY;EAC5DxB,IAAI,CAACE,OAAO,CAACF,IAAI,CAACG,OAAO,EAAE,GAAG0B,IAAI,CAAC;EACnC7B,IAAI,CAAC8B,QAAQ,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;EACzB,OAAO9B,IAAI;AACb;;AC/CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEe,SAAS+B,UAAU,CAACjC,SAAS,EAAE;EAC5CpB,YAAY,CAAC,CAAC,EAAEO,SAAS,CAAC;EAC1B,IAAIe,IAAI,GAAGjB,MAAM,CAACe,SAAS,CAAC;EAC5BE,IAAI,CAAC8B,QAAQ,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;EACzB,OAAO9B,IAAI;AACb;;ACvBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEe,SAASgC,QAAQ,CAAClC,SAAS,EAAEC,WAAW,EAAE;EACvDrB,YAAY,CAAC,CAAC,EAAEO,SAAS,CAAC;EAC1B,IAAIgB,MAAM,GAAGhC,SAAS,CAAC8B,WAAW,CAAC;EACnC,IAAIkC,IAAI,GAAGhC,MAAM,GAAG,CAAC;EACrB,OAAOJ,OAAO,CAACC,SAAS,EAAEmC,IAAI,CAAC;AACjC;;ACxBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEe,SAASC,QAAQ,CAACpC,SAAS,EAAEC,WAAW,EAAE;EACvDrB,YAAY,CAAC,CAAC,EAAEO,SAAS,CAAC;EAC1B,IAAIgB,MAAM,GAAGhC,SAAS,CAAC8B,WAAW,CAAC;EACnC,OAAOK,SAAS,CAACN,SAAS,EAAEG,MAAM,GAAG,EAAE,CAAC;AAC1C;;ACxBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEe,SAASkC,UAAU,CAACrC,SAAS,EAAE;EAC5CpB,YAAY,CAAC,CAAC,EAAEO,SAAS,CAAC;EAC1B,IAAIe,IAAI,GAAGjB,MAAM,CAACe,SAAS,CAAC;EAC5B,IAAIsC,KAAK,GAAGpC,IAAI,CAACQ,QAAQ,EAAE;EAC3BR,IAAI,CAACU,WAAW,CAACV,IAAI,CAACW,WAAW,EAAE,EAAEyB,KAAK,GAAG,CAAC,EAAE,CAAC,CAAC;EAClDpC,IAAI,CAAC8B,QAAQ,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,CAAC;EAC9B,OAAO9B,IAAI;AACb;;AC1BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEe,SAASqC,iBAAiB,CAACC,aAAa,EAAEvB,OAAO,EAAE;EAChE,IAAIwB,aAAa;EAEjB7D,YAAY,CAAC,CAAC,EAAEO,SAAS,CAAC;EAC1B,IAAIuD,QAAQ,GAAGF,aAAa,IAAI,EAAE;EAClC,IAAIG,SAAS,GAAG1D,MAAM,CAACyD,QAAQ,CAACE,KAAK,CAAC;EACtC,IAAIC,OAAO,GAAG5D,MAAM,CAACyD,QAAQ,CAACI,GAAG,CAAC;EAClC,IAAIC,OAAO,GAAGF,OAAO,CAACnD,OAAO,EAAE,CAAC;;EAEhC,IAAI,EAAEiD,SAAS,CAACjD,OAAO,EAAE,IAAIqD,OAAO,CAAC,EAAE;IACrC,MAAM,IAAInB,UAAU,CAAC,kBAAkB,CAAC;EAC5C;EAEE,IAAIoB,KAAK,GAAG,EAAE;EACd,IAAIC,WAAW,GAAGN,SAAS;EAC3BM,WAAW,CAACjB,QAAQ,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;EAChC,IAAIkB,IAAI,GAAG3E,MAAM,CAAC,CAACkE,aAAa,GAAGxB,OAAO,KAAK,IAAI,IAAIA,OAAO,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,OAAO,CAACiC,IAAI,MAAM,IAAI,IAAIT,aAAa,KAAK,KAAK,CAAC,GAAGA,aAAa,GAAG,CAAC,CAAC;EAC5J,IAAIS,IAAI,GAAG,CAAC,IAAI1E,KAAK,CAAC0E,IAAI,CAAC,EAAE,MAAM,IAAItB,UAAU,CAAC,gDAAgD,CAAC;EAEnG,OAAOqB,WAAW,CAACvD,OAAO,EAAE,IAAIqD,OAAO,EAAE;IACvCC,KAAK,CAACG,IAAI,CAAClE,MAAM,CAACgE,WAAW,CAAC,CAAC;IAC/BA,WAAW,CAAC7C,OAAO,CAAC6C,WAAW,CAAC5C,OAAO,EAAE,GAAG6C,IAAI,CAAC;IACjDD,WAAW,CAACjB,QAAQ,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;EACpC;EAEE,OAAOgB,KAAK;AACd;;AC1DA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEe,SAASI,mBAAmB,CAACZ,aAAa,EAAE;EACzD5D,YAAY,CAAC,CAAC,EAAEO,SAAS,CAAC;EAC1B,IAAIuD,QAAQ,GAAGF,aAAa,IAAI,EAAE;EAClC,IAAIG,SAAS,GAAG1D,MAAM,CAACyD,QAAQ,CAACE,KAAK,CAAC;EACtC,IAAIC,OAAO,GAAG5D,MAAM,CAACyD,QAAQ,CAACI,GAAG,CAAC;EAClC,IAAIC,OAAO,GAAGF,OAAO,CAACnD,OAAO,EAAE;EAC/B,IAAIsD,KAAK,GAAG,EAAE,CAAC;;EAEf,IAAI,EAAEL,SAAS,CAACjD,OAAO,EAAE,IAAIqD,OAAO,CAAC,EAAE;IACrC,MAAM,IAAInB,UAAU,CAAC,kBAAkB,CAAC;EAC5C;EAEE,IAAIqB,WAAW,GAAGN,SAAS;EAC3BM,WAAW,CAACjB,QAAQ,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;EAChCiB,WAAW,CAAC7C,OAAO,CAAC,CAAC,CAAC;EAEtB,OAAO6C,WAAW,CAACvD,OAAO,EAAE,IAAIqD,OAAO,EAAE;IACvCC,KAAK,CAACG,IAAI,CAAClE,MAAM,CAACgE,WAAW,CAAC,CAAC;IAC/BA,WAAW,CAACxC,QAAQ,CAACwC,WAAW,CAACvC,QAAQ,EAAE,GAAG,CAAC,CAAC;EACpD;EAEE,OAAOsC,KAAK;AACd;;ACnDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEe,SAASK,kBAAkB,CAACb,aAAa,EAAEvB,OAAO,EAAE;EACjErC,YAAY,CAAC,CAAC,EAAEO,SAAS,CAAC;EAC1B,IAAIuD,QAAQ,GAAGF,aAAa,IAAI,EAAE;EAClC,IAAIG,SAAS,GAAG1D,MAAM,CAACyD,QAAQ,CAACE,KAAK,CAAC;EACtC,IAAIC,OAAO,GAAG5D,MAAM,CAACyD,QAAQ,CAACI,GAAG,CAAC;EAClC,IAAIC,OAAO,GAAGF,OAAO,CAACnD,OAAO,EAAE,CAAC;;EAEhC,IAAI,EAAEiD,SAAS,CAACjD,OAAO,EAAE,IAAIqD,OAAO,CAAC,EAAE;IACrC,MAAM,IAAInB,UAAU,CAAC,kBAAkB,CAAC;EAC5C;EAEE,IAAI0B,aAAa,GAAGtC,WAAW,CAAC2B,SAAS,EAAE1B,OAAO,CAAC;EACnD,IAAIsC,WAAW,GAAGvC,WAAW,CAAC6B,OAAO,EAAE5B,OAAO,CAAC,CAAC;;EAEhDqC,aAAa,CAACtB,QAAQ,CAAC,EAAE,CAAC;EAC1BuB,WAAW,CAACvB,QAAQ,CAAC,EAAE,CAAC;EACxBe,OAAO,GAAGQ,WAAW,CAAC7D,OAAO,EAAE;EAC/B,IAAI8D,KAAK,GAAG,EAAE;EACd,IAAIC,WAAW,GAAGH,aAAa;EAE/B,OAAOG,WAAW,CAAC/D,OAAO,EAAE,IAAIqD,OAAO,EAAE;IACvCU,WAAW,CAACzB,QAAQ,CAAC,CAAC,CAAC;IACvBwB,KAAK,CAACL,IAAI,CAAClE,MAAM,CAACwE,WAAW,CAAC,CAAC;IAC/BA,WAAW,GAAGvB,QAAQ,CAACuB,WAAW,EAAE,CAAC,CAAC;IACtCA,WAAW,CAACzB,QAAQ,CAAC,EAAE,CAAC;EAC5B;EAEE,OAAOwB,KAAK;AACd;;AClEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEe,SAASE,YAAY,CAAC1D,SAAS,EAAE;EAC9CpB,YAAY,CAAC,CAAC,EAAEO,SAAS,CAAC;EAC1B,IAAIe,IAAI,GAAGjB,MAAM,CAACe,SAAS,CAAC;EAC5BE,IAAI,CAACE,OAAO,CAAC,CAAC,CAAC;EACfF,IAAI,CAAC8B,QAAQ,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;EACzB,OAAO9B,IAAI;AACb;;ACtBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACe,SAASyD,SAAS,CAAC3D,SAAS,EAAEiB,OAAO,EAAE;EACpD,IAAIC,IAAI,EAAEC,KAAK,EAAEC,KAAK,EAAEC,qBAAqB,EAAEC,eAAe,EAAEC,qBAAqB,EAAEC,qBAAqB,EAAEC,sBAAsB;EAEpI7C,YAAY,CAAC,CAAC,EAAEO,SAAS,CAAC;EAC1B,IAAI2B,cAAc,GAAGC,iBAAiB,EAAE;EACxC,IAAIW,YAAY,GAAGvD,SAAS,CAAC,CAAC+C,IAAI,GAAG,CAACC,KAAK,GAAG,CAACC,KAAK,GAAG,CAACC,qBAAqB,GAAGJ,OAAO,KAAK,IAAI,IAAIA,OAAO,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,OAAO,CAACS,YAAY,MAAM,IAAI,IAAIL,qBAAqB,KAAK,KAAK,CAAC,GAAGA,qBAAqB,GAAGJ,OAAO,KAAK,IAAI,IAAIA,OAAO,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAG,CAACK,eAAe,GAAGL,OAAO,CAACU,MAAM,MAAM,IAAI,IAAIL,eAAe,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAG,CAACC,qBAAqB,GAAGD,eAAe,CAACL,OAAO,MAAM,IAAI,IAAIM,qBAAqB,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,qBAAqB,CAACG,YAAY,MAAM,IAAI,IAAIN,KAAK,KAAK,KAAK,CAAC,GAAGA,KAAK,GAAGN,cAAc,CAACY,YAAY,MAAM,IAAI,IAAIP,KAAK,KAAK,KAAK,CAAC,GAAGA,KAAK,GAAG,CAACK,qBAAqB,GAAGV,cAAc,CAACa,MAAM,MAAM,IAAI,IAAIH,qBAAqB,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAG,CAACC,sBAAsB,GAAGD,qBAAqB,CAACP,OAAO,MAAM,IAAI,IAAIQ,sBAAsB,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,sBAAsB,CAACC,YAAY,MAAM,IAAI,IAAIR,IAAI,KAAK,KAAK,CAAC,GAAGA,IAAI,GAAG,CAAC,CAAC,CAAC;;EAEt4B,IAAI,EAAEQ,YAAY,IAAI,CAAC,IAAIA,YAAY,IAAI,CAAC,CAAC,EAAE;IAC7C,MAAM,IAAIE,UAAU,CAAC,kDAAkD,CAAC;EAC5E;EAEE,IAAI1B,IAAI,GAAGjB,MAAM,CAACe,SAAS,CAAC;EAC5B,IAAI6B,GAAG,GAAG3B,IAAI,CAAC4B,MAAM,EAAE;EACvB,IAAIC,IAAI,GAAG,CAACF,GAAG,GAAGH,YAAY,GAAG,CAAC,CAAC,GAAG,CAAC,IAAI,CAAC,IAAIG,GAAG,GAAGH,YAAY,CAAC;EACnExB,IAAI,CAACE,OAAO,CAACF,IAAI,CAACG,OAAO,EAAE,GAAG0B,IAAI,CAAC;EACnC7B,IAAI,CAAC8B,QAAQ,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,CAAC;EAC9B,OAAO9B,IAAI;AACb;;AC/CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEe,SAAS0D,cAAc,CAAC5D,SAAS,EAAE;EAChDpB,YAAY,CAAC,CAAC,EAAEO,SAAS,CAAC;EAC1B,IAAIe,IAAI,GAAGjB,MAAM,CAACe,SAAS,CAAC;EAC5B,IAAI6D,IAAI,GAAG3D,IAAI,CAACW,WAAW,EAAE;EAC7B,IAAIiD,UAAU,GAAG5D,IAAI,CAACQ,QAAQ,EAAE;EAChC,IAAIqD,cAAc,GAAG,IAAItE,IAAI,CAAC,CAAC,CAAC;EAChCsE,cAAc,CAACnD,WAAW,CAACiD,IAAI,EAAEC,UAAU,GAAG,CAAC,EAAE,CAAC,CAAC;EACnDC,cAAc,CAAC/B,QAAQ,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;EACnC,OAAO+B,cAAc,CAAC1D,OAAO,EAAE;AACjC;;AC3BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEe,SAAS2D,OAAO,CAAChE,SAAS,EAAEiE,kBAAkB,EAAE;EAC7DrF,YAAY,CAAC,CAAC,EAAEO,SAAS,CAAC;EAC1B,IAAIe,IAAI,GAAGjB,MAAM,CAACe,SAAS,CAAC;EAC5B,IAAIkE,aAAa,GAAGjF,MAAM,CAACgF,kBAAkB,CAAC;EAC9C,OAAO/D,IAAI,CAACR,OAAO,EAAE,GAAGwE,aAAa,CAACxE,OAAO,EAAE;AACjD;;ACxBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEe,SAASyE,QAAQ,CAACnE,SAAS,EAAEiE,kBAAkB,EAAE;EAC9DrF,YAAY,CAAC,CAAC,EAAEO,SAAS,CAAC;EAC1B,IAAIe,IAAI,GAAGjB,MAAM,CAACe,SAAS,CAAC;EAC5B,IAAIkE,aAAa,GAAGjF,MAAM,CAACgF,kBAAkB,CAAC;EAC9C,OAAO/D,IAAI,CAACR,OAAO,EAAE,GAAGwE,aAAa,CAACxE,OAAO,EAAE;AACjD;;ACxBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEe,SAAS0E,OAAO,CAACC,aAAa,EAAEC,cAAc,EAAE;EAC7D1F,YAAY,CAAC,CAAC,EAAEO,SAAS,CAAC;EAC1B,IAAIoF,QAAQ,GAAGtF,MAAM,CAACoF,aAAa,CAAC;EACpC,IAAIG,SAAS,GAAGvF,MAAM,CAACqF,cAAc,CAAC;EACtC,OAAOC,QAAQ,CAAC7E,OAAO,EAAE,KAAK8E,SAAS,CAAC9E,OAAO,EAAE;AACnD;;ACzBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEe,SAASe,QAAQ,CAACT,SAAS,EAAEyE,UAAU,EAAE;EACtD7F,YAAY,CAAC,CAAC,EAAEO,SAAS,CAAC;EAC1B,IAAIe,IAAI,GAAGjB,MAAM,CAACe,SAAS,CAAC;EAC5B,IAAIsC,KAAK,GAAGnE,SAAS,CAACsG,UAAU,CAAC;EACjC,IAAIZ,IAAI,GAAG3D,IAAI,CAACW,WAAW,EAAE;EAC7B,IAAIgB,GAAG,GAAG3B,IAAI,CAACG,OAAO,EAAE;EACxB,IAAIqE,oBAAoB,GAAG,IAAIjF,IAAI,CAAC,CAAC,CAAC;EACtCiF,oBAAoB,CAAC9D,WAAW,CAACiD,IAAI,EAAEvB,KAAK,EAAE,EAAE,CAAC;EACjDoC,oBAAoB,CAAC1C,QAAQ,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;EACzC,IAAIrB,WAAW,GAAGiD,cAAc,CAACc,oBAAoB,CAAC,CAAC;EACzD;;EAEExE,IAAI,CAACO,QAAQ,CAAC6B,KAAK,EAAE7D,IAAI,CAACkG,GAAG,CAAC9C,GAAG,EAAElB,WAAW,CAAC,CAAC;EAChD,OAAOT,IAAI;AACb;;AChCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACe,SAAS0E,GAAG,CAAC5E,SAAS,EAAE6E,MAAM,EAAE;EAC7CjG,YAAY,CAAC,CAAC,EAAEO,SAAS,CAAC;EAE1B,IAAI,OAAO0F,MAAM,KAAK,QAAQ,IAAIA,MAAM,KAAK,IAAI,EAAE;IACjD,MAAM,IAAIjD,UAAU,CAAC,oCAAoC,CAAC;EAC9D;EAEE,IAAI1B,IAAI,GAAGjB,MAAM,CAACe,SAAS,CAAC,CAAC;;EAE7B,IAAIxB,KAAK,CAAC0B,IAAI,CAACR,OAAO,EAAE,CAAC,EAAE;IACzB,OAAO,IAAID,IAAI,CAACpB,GAAG,CAAC;EACxB;EAEE,IAAIwG,MAAM,CAAChB,IAAI,IAAI,IAAI,EAAE;IACvB3D,IAAI,CAACU,WAAW,CAACiE,MAAM,CAAChB,IAAI,CAAC;EACjC;EAEE,IAAIgB,MAAM,CAACvC,KAAK,IAAI,IAAI,EAAE;IACxBpC,IAAI,GAAGO,QAAQ,CAACP,IAAI,EAAE2E,MAAM,CAACvC,KAAK,CAAC;EACvC;EAEE,IAAIuC,MAAM,CAAC3E,IAAI,IAAI,IAAI,EAAE;IACvBA,IAAI,CAACE,OAAO,CAACjC,SAAS,CAAC0G,MAAM,CAAC3E,IAAI,CAAC,CAAC;EACxC;EAEE,IAAI2E,MAAM,CAACC,KAAK,IAAI,IAAI,EAAE;IACxB5E,IAAI,CAAC8B,QAAQ,CAAC7D,SAAS,CAAC0G,MAAM,CAACC,KAAK,CAAC,CAAC;EAC1C;EAEE,IAAID,MAAM,CAACE,OAAO,IAAI,IAAI,EAAE;IAC1B7E,IAAI,CAAC8E,UAAU,CAAC7G,SAAS,CAAC0G,MAAM,CAACE,OAAO,CAAC,CAAC;EAC9C;EAEE,IAAIF,MAAM,CAACI,OAAO,IAAI,IAAI,EAAE;IAC1B/E,IAAI,CAACgF,UAAU,CAAC/G,SAAS,CAAC0G,MAAM,CAACI,OAAO,CAAC,CAAC;EAC9C;EAEE,IAAIJ,MAAM,CAACM,YAAY,IAAI,IAAI,EAAE;IAC/BjF,IAAI,CAACkF,eAAe,CAACjH,SAAS,CAAC0G,MAAM,CAACM,YAAY,CAAC,CAAC;EACxD;EAEE,OAAOjF,IAAI;AACb;;AClFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEe,SAASmF,OAAO,CAACrF,SAAS,EAAEsF,SAAS,EAAE;EACpD1G,YAAY,CAAC,CAAC,EAAEO,SAAS,CAAC;EAC1B,IAAIe,IAAI,GAAGjB,MAAM,CAACe,SAAS,CAAC;EAC5B,IAAI6D,IAAI,GAAG1F,SAAS,CAACmH,SAAS,CAAC,CAAC;;EAEhC,IAAI9G,KAAK,CAAC0B,IAAI,CAACR,OAAO,EAAE,CAAC,EAAE;IACzB,OAAO,IAAID,IAAI,CAACpB,GAAG,CAAC;EACxB;EAEE6B,IAAI,CAACU,WAAW,CAACiD,IAAI,CAAC;EACtB,OAAO3D,IAAI;AACb;;AChCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEe,SAASqF,YAAY,GAAG;EACrC,OAAOtD,UAAU,CAACxC,IAAI,CAAC+F,GAAG,EAAE,CAAC;AAC/B;;ACpBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEe,SAASC,SAAS,CAACzF,SAAS,EAAEC,WAAW,EAAE;EACxDrB,YAAY,CAAC,CAAC,EAAEO,SAAS,CAAC;EAC1B,IAAIgB,MAAM,GAAGhC,SAAS,CAAC8B,WAAW,CAAC;EACnC,OAAOK,SAAS,CAACN,SAAS,EAAE,CAACG,MAAM,CAAC;AACtC;;ACvBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEe,SAASuF,QAAQ,CAAC1F,SAAS,EAAEC,WAAW,EAAE;EACvDrB,YAAY,CAAC,CAAC,EAAEO,SAAS,CAAC;EAC1B,IAAIgB,MAAM,GAAGhC,SAAS,CAAC8B,WAAW,CAAC;EACnC,OAAOmC,QAAQ,CAACpC,SAAS,EAAE,CAACG,MAAM,CAAC;AACrC;ICJYwF;AAAZ,WAAYA,KAAK;EACfA,uCAAO;EACPA,yCAAQ;EACRA,mCAAK;EACLA,mCAAK;EACLA,+BAAG;EACHA,iCAAI;EACJA,iCAAI;EACJA,qCAAM;EACNA,2CAAS;EACTA,uCAAO;EACPA,0CAAQ;EACRA,0CAAQ;AACV,CAAC,EAbWA,KAAK,KAALA,KAAK,GAahB;IAEWC;AAAZ,WAAYA,GAAG;EACbA,iCAAM;EACNA,iCAAM;EACNA,mCAAO;EACPA,uCAAS;EACTA,qCAAQ;EACRA,iCAAM;EACNA,qCAAQ;AACV,CAAC,EARWA,GAAG,KAAHA,GAAG,GAQd;AA6ID,IAAMC,OAAO,GAAG,UAAC3F,IAAU,EAAEyE,GAAS,EAAEmB,GAAS;EAC/C,QAAC1B,OAAO,CAAClE,IAAI,EAAEyE,GAAG,CAAC,IAAIX,OAAO,CAAC9D,IAAI,EAAEyE,GAAG,CAAC,MAAMP,OAAO,CAAClE,IAAI,EAAE4F,GAAG,CAAC,IAAI3B,QAAQ,CAACjE,IAAI,EAAE4F,GAAG,CAAC,CAAC;AAAzF,CAAyF;AAE3F,IAAMC,SAAS,GAAG,UAAC7F,IAAU,EAAK;EAAA,UAAG,CAACA,IAAI,EAAE;IAAE4E,KAAK,EAAE,CAAC;IAAEC,OAAO,EAAE,CAAC;IAAEE,OAAO,EAAE,CAAC;IAAEE,YAAY,EAAE;EAAC,CAAE,CAAC;AAAA;AAE3F,IAAMa,SAAS,GAAG,UAACC,EAKX;EALW,yBAKb,EAAE;IAJbC,oBAAyB;IAAzBxE,YAAY,mBAAGkE,GAAG,CAACO,MAAM;IACzBC,eAAoC;IAA3BC,cAAc,mBAAG,IAAI5G,IAAI,EAAE;IACpC6G,gBAA8B;IAApBC,eAAe,mBAAG,EAAE;IAC9BC,EAAkB;IAAlBC,cAAc,mBAAG,CAAC;EAEZ,SAAwBC,QAAQ,CAAOL,cAAc,CAAC;IAArDM,OAAO;IAAEC,UAAU,QAAkC;EAE5D,IAAMC,SAAS,GAAGC,WAAW,CAAC,YAAM;IAAA,iBAAU,CAACvB,YAAY,EAAE,CAAC;EAAA,GAAE,CAACqB,UAAU,CAAC,CAAC;EAE7E,IAAMG,SAAS,GAAGD,WAAW,CAAC,UAACxE,KAAY,EAAK;IAAA,iBAAU,CAAC,UAAC0E,CAAC,EAAK;MAAA,eAAQ,CAACA,CAAC,EAAE1E,KAAK,CAAC;IAAlB,CAAkB,CAAC;EAAA,GAAE,EAAE,CAAC;EAE1F,IAAM2E,iBAAiB,GAAGH,WAAW,CAAC;IAAM,iBAAU,CAAC,UAACE,CAAC;MAAK,gBAAS,CAACA,CAAC,EAAE,CAAC,CAAC;IAAf,CAAe,CAAC;EAAA,GAAE,EAAE,CAAC;EAEnF,IAAME,aAAa,GAAGJ,WAAW,CAAC;IAAM,iBAAU,CAAC,UAACE,CAAC;MAAK,gBAAS,CAACA,CAAC,EAAE,CAAC,CAAC;IAAf,CAAe,CAAC;EAAA,GAAE,EAAE,CAAC;EAE/E,IAAMG,QAAQ,GAAGL,WAAW,CAAC,UAACjD,IAAY,EAAK;IAAA,iBAAU,CAAC,UAACmD,CAAC,EAAK;MAAA,cAAO,CAACA,CAAC,EAAEnD,IAAI,CAAC;IAAhB,CAAgB,CAAC;EAAA,GAAE,EAAE,CAAC;EAEvF,IAAMuD,gBAAgB,GAAGN,WAAW,CAAC;IAAM,iBAAU,CAAC,UAACE,CAAC;MAAK,eAAQ,CAACA,CAAC,EAAE,CAAC,CAAC;IAAd,CAAc,CAAC;EAAA,GAAE,EAAE,CAAC;EAEjF,IAAMK,YAAY,GAAGP,WAAW,CAAC;IAAM,iBAAU,CAAC,UAACE,CAAC;MAAK,eAAQ,CAACA,CAAC,EAAE,CAAC,CAAC;IAAd,CAAc,CAAC;EAAA,GAAE,EAAE,CAAC;EAEvE,SAA0BN,QAAQ,CAASH,eAAe,CAACe,GAAG,CAACvB,SAAS,CAAC,CAAC;IAAzEwB,QAAQ;IAAEC,WAAW,QAAoD;EAEhF,IAAMC,aAAa,GAAG;IAAM,kBAAW,CAAC,EAAE,CAAC;EAAf,CAAe;EAE3C,IAAMC,UAAU,GAAGZ,WAAW,CAAC,UAAC5G,IAAU;IAAK,eAAQ,CAACyH,SAAS,CAAC,UAACC,CAAC;MAAK,cAAO,CAACA,CAAC,EAAE1H,IAAI,CAAC;IAAhB,CAAgB,CAAC,GAAG,CAAC,CAAC;EAAA,GAAE,CAACqH,QAAQ,CAAC,CAAC;EAE5G,IAAMM,MAAM,GAAGf,WAAW,CAAC,UAAC5G,IAAmB,EAAE4H,eAAyB;IACxE,IAAIA,eAAe,EAAE;MACnBN,WAAW,CAACO,KAAK,CAACC,OAAO,CAAC9H,IAAI,CAAC,GAAGA,IAAI,GAAG,CAACA,IAAI,CAAC,CAAC;IACjD,OAAM;MACLsH,WAAW,CAAC,UAACS,aAAa;QAAK,oBAAa,CAACC,MAAM,CAACH,KAAK,CAACC,OAAO,CAAC9H,IAAI,CAAC,GAAGA,IAAI,GAAG,CAACA,IAAI,CAAC,CAAC;MAAzD,CAAyD,CAAC;IAC1F;GACF,EAAE,EAAE,CAAC;EAEN,IAAMiI,QAAQ,GAAGrB,WAAW,CAC1B,UAAC5G,IAAmB;IAClB,kBAAW,CAAC,UAAC+H,aAAa;MACxB,YAAK,CAACD,OAAO,CAAC9H,IAAI,CAAC,GACf+H,aAAa,CAACG,MAAM,CAAC,UAACR,CAAC,EAAK;QAAA,QAAC1H,IAAI,CAACoH,GAAG,CAAC,UAACe,CAAC;UAAK,QAAC,CAAC3I,OAAO,EAAE;QAAX,CAAW,CAAC,CAAC4I,QAAQ,CAACV,CAAC,CAAClI,OAAO,EAAE,CAAC;MAAA,EAAC,GAChFuI,aAAa,CAACG,MAAM,CAAC,UAACR,CAAC,EAAK;QAAA,QAACxD,OAAO,CAACwD,CAAC,EAAE1H,IAAI,CAAC;MAAA,EAAC;IAFlD,CAEkD,CACnD;GAAA,EACH,EAAE,CACH;EAED,IAAMqI,MAAM,GAAGzB,WAAW,CACxB,UAAC5G,IAAU,EAAE4H,eAAyB;IAAK,OAACJ,UAAU,CAACxH,IAAI,CAAC,GAAGiI,QAAQ,CAACjI,IAAI,CAAC,GAAG2H,MAAM,CAAC3H,IAAI,EAAE4H,eAAe,CAAC;EAAC,GAC9G,CAACK,QAAQ,EAAET,UAAU,EAAEG,MAAM,CAAC,CAC/B;EAED,IAAMW,WAAW,GAAG1B,WAAW,CAAC,UAAClE,KAAW,EAAEE,GAAS,EAAEgF,eAAyB;IAChF,IAAIA,eAAe,EAAE;MACnBN,WAAW,CAACjF,iBAAiB,CAAC;QAAEK,KAAK;QAAEE,GAAG;MAAA,CAAE,CAAC,CAAC;IAC/C,OAAM;MACL0E,WAAW,CAAC,UAACS,aAAa;QAAK,oBAAa,CAACC,MAAM,CAAC3F,iBAAiB,CAAC;UAAEK,KAAK;UAAEE,GAAG;QAAA,CAAE,CAAC,CAAC;MAAA,EAAC;IACxF;GACF,EAAE,EAAE,CAAC;EAEN,IAAM2F,aAAa,GAAG3B,WAAW,CAAC,UAAClE,KAAW,EAAEE,GAAS;IACvD0E,WAAW,CAAC,UAACS,aAAa;MACxB,oBAAa,CAACG,MAAM,CAClB,UAACR,CAAC;QACA,QAACrF,iBAAiB,CAAC;UAAEK,KAAK;UAAEE,GAAG;QAAA,CAAE,CAAC,CAC/BwE,GAAG,CAAC,UAACe,CAAC,EAAK;UAAA,QAAC,CAAC3I,OAAO,EAAE;QAAX,CAAW,CAAC,CACvB4I,QAAQ,CAACV,CAAC,CAAClI,OAAO,EAAE,CAAC;MAFxB,CAEwB,CAC3B;IALD,CAKC,CACF;GACF,EAAE,EAAE,CAAC;EAEN,IAAMgJ,QAAQ,GAAGC,OAAO,CACtB;IACE,0BAAmB,CAAC;MAClB/F,KAAK,EAAEc,YAAY,CAACiD,OAAO,CAAC;MAC5B7D,GAAG,EAAET,UAAU,CAAC/B,SAAS,CAACqG,OAAO,EAAEF,cAAc,GAAG,CAAC,CAAC;IACvD,EAAC,CAACa,GAAG,CAAC,UAAChF,KAAK;MACX,yBAAkB,CAChB;QACEM,KAAK,EAAEc,YAAY,CAACpB,KAAK,CAAC;QAC1BQ,GAAG,EAAET,UAAU,CAACC,KAAK;OACtB,EACD;QAAEZ,YAAY;MAAA,CAAE,CACjB,CAAC4F,GAAG,CAAC,UAACsB,IAAI;QACT,wBAAiB,CAAC;UAChBhG,KAAK,EAAE5B,WAAW,CAAC4H,IAAI,EAAE;YAAElH,YAAY;UAAA,CAAE,CAAC;UAC1CoB,GAAG,EAAEa,SAAS,CAACiF,IAAI,EAAE;YAAElH,YAAY;UAAA,CAAE;SACtC,CAAC;MAHF,CAGE,CACH;IAXD,CAWC,CACF;GAAA,EACH,CAACiF,OAAO,EAAEjF,YAAY,EAAE+E,cAAc,CAAC,CACxC;EAED,OAAO;IACLV,SAAS;IACTF,OAAO;IACPc,OAAO;IACPC,UAAU;IACVC,SAAS;IACTE,SAAS;IACTE,iBAAiB;IACjBC,aAAa;IACbC,QAAQ;IACRC,gBAAgB;IAChBC,YAAY;IACZE,QAAQ;IACRC,WAAW;IACXC,aAAa;IACbC,UAAU;IACVG,MAAM;IACNM,QAAQ;IACRI,MAAM;IACNC,WAAW;IACXC,aAAa;IACbC,QAAQ;GACT;AACH","names":["toInteger","dirtyNumber","NaN","number","Number","isNaN","Math","ceil","floor","requiredArgs","required","args","length","TypeError","toDate","argument","arguments","argStr","Object","prototype","toString","call","Date","getTime","console","warn","Error","stack","addDays","dirtyDate","dirtyAmount","date","amount","setDate","getDate","addMonths","dayOfMonth","endOfDesiredMonth","setMonth","getMonth","daysInMonth","setFullYear","getFullYear","defaultOptions","getDefaultOptions","startOfWeek","options","_ref","_ref2","_ref3","_options$weekStartsOn","_options$locale","_options$locale$optio","_defaultOptions$local","_defaultOptions$local2","weekStartsOn","locale","RangeError","day","getDay","diff","setHours","startOfDay","addWeeks","days","addYears","endOfMonth","month","eachDayOfInterval","dirtyInterval","_options$step","interval","startDate","start","endDate","end","endTime","dates","currentDate","step","push","eachMonthOfInterval","eachWeekOfInterval","startDateWeek","endDateWeek","weeks","currentWeek","startOfMonth","endOfWeek","getDaysInMonth","year","monthIndex","lastDayOfMonth","isAfter","dirtyDateToCompare","dateToCompare","isBefore","isEqual","dirtyLeftDate","dirtyRightDate","dateLeft","dateRight","dirtyMonth","dateWithDesiredMonth","min","set","values","hours","minutes","setMinutes","seconds","setSeconds","milliseconds","setMilliseconds","setYear","dirtyYear","startOfToday","now","subMonths","subYears","Month","Day","inRange","max","clearTime","useLilius","_a","_c","SUNDAY","_d","initialViewing","_e","initialSelected","_f","numberOfMonths","useState","viewing","setViewing","viewToday","useCallback","viewMonth","v","viewPreviousMonth","viewNextMonth","viewYear","viewPreviousYear","viewNextYear","map","selected","setSelected","clearSelected","isSelected","findIndex","s","select","replaceExisting","Array","isArray","selectedItems","concat","deselect","filter","d","includes","toggle","selectRange","deselectRange","calendar","useMemo","week"],"sources":["/Users/trams/Documents/CS585PROJECT/students_portal_frontend/node_modules/use-lilius/node_modules/date-fns/esm/_lib/toInteger/index.js","/Users/trams/Documents/CS585PROJECT/students_portal_frontend/node_modules/use-lilius/node_modules/date-fns/esm/_lib/requiredArgs/index.js","/Users/trams/Documents/CS585PROJECT/students_portal_frontend/node_modules/use-lilius/node_modules/date-fns/esm/toDate/index.js","/Users/trams/Documents/CS585PROJECT/students_portal_frontend/node_modules/use-lilius/node_modules/date-fns/esm/addDays/index.js","/Users/trams/Documents/CS585PROJECT/students_portal_frontend/node_modules/use-lilius/node_modules/date-fns/esm/addMonths/index.js","/Users/trams/Documents/CS585PROJECT/students_portal_frontend/node_modules/use-lilius/node_modules/date-fns/esm/_lib/defaultOptions/index.js","/Users/trams/Documents/CS585PROJECT/students_portal_frontend/node_modules/use-lilius/node_modules/date-fns/esm/startOfWeek/index.js","/Users/trams/Documents/CS585PROJECT/students_portal_frontend/node_modules/use-lilius/node_modules/date-fns/esm/startOfDay/index.js","/Users/trams/Documents/CS585PROJECT/students_portal_frontend/node_modules/use-lilius/node_modules/date-fns/esm/addWeeks/index.js","/Users/trams/Documents/CS585PROJECT/students_portal_frontend/node_modules/use-lilius/node_modules/date-fns/esm/addYears/index.js","/Users/trams/Documents/CS585PROJECT/students_portal_frontend/node_modules/use-lilius/node_modules/date-fns/esm/endOfMonth/index.js","/Users/trams/Documents/CS585PROJECT/students_portal_frontend/node_modules/use-lilius/node_modules/date-fns/esm/eachDayOfInterval/index.js","/Users/trams/Documents/CS585PROJECT/students_portal_frontend/node_modules/use-lilius/node_modules/date-fns/esm/eachMonthOfInterval/index.js","/Users/trams/Documents/CS585PROJECT/students_portal_frontend/node_modules/use-lilius/node_modules/date-fns/esm/eachWeekOfInterval/index.js","/Users/trams/Documents/CS585PROJECT/students_portal_frontend/node_modules/use-lilius/node_modules/date-fns/esm/startOfMonth/index.js","/Users/trams/Documents/CS585PROJECT/students_portal_frontend/node_modules/use-lilius/node_modules/date-fns/esm/endOfWeek/index.js","/Users/trams/Documents/CS585PROJECT/students_portal_frontend/node_modules/use-lilius/node_modules/date-fns/esm/getDaysInMonth/index.js","/Users/trams/Documents/CS585PROJECT/students_portal_frontend/node_modules/use-lilius/node_modules/date-fns/esm/isAfter/index.js","/Users/trams/Documents/CS585PROJECT/students_portal_frontend/node_modules/use-lilius/node_modules/date-fns/esm/isBefore/index.js","/Users/trams/Documents/CS585PROJECT/students_portal_frontend/node_modules/use-lilius/node_modules/date-fns/esm/isEqual/index.js","/Users/trams/Documents/CS585PROJECT/students_portal_frontend/node_modules/use-lilius/node_modules/date-fns/esm/setMonth/index.js","/Users/trams/Documents/CS585PROJECT/students_portal_frontend/node_modules/use-lilius/node_modules/date-fns/esm/set/index.js","/Users/trams/Documents/CS585PROJECT/students_portal_frontend/node_modules/use-lilius/node_modules/date-fns/esm/setYear/index.js","/Users/trams/Documents/CS585PROJECT/students_portal_frontend/node_modules/use-lilius/node_modules/date-fns/esm/startOfToday/index.js","/Users/trams/Documents/CS585PROJECT/students_portal_frontend/node_modules/use-lilius/node_modules/date-fns/esm/subMonths/index.js","/Users/trams/Documents/CS585PROJECT/students_portal_frontend/node_modules/use-lilius/node_modules/date-fns/esm/subYears/index.js","/Users/trams/Documents/CS585PROJECT/students_portal_frontend/node_modules/use-lilius/src/use-lilius.ts"],"sourcesContent":["export default function toInteger(dirtyNumber) {\n  if (dirtyNumber === null || dirtyNumber === true || dirtyNumber === false) {\n    return NaN;\n  }\n\n  var number = Number(dirtyNumber);\n\n  if (isNaN(number)) {\n    return number;\n  }\n\n  return number < 0 ? Math.ceil(number) : Math.floor(number);\n}","export default function requiredArgs(required, args) {\n  if (args.length < required) {\n    throw new TypeError(required + ' argument' + (required > 1 ? 's' : '') + ' required, but only ' + args.length + ' present');\n  }\n}","import requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name toDate\n * @category Common Helpers\n * @summary Convert the given argument to an instance of Date.\n *\n * @description\n * Convert the given argument to an instance of Date.\n *\n * If the argument is an instance of Date, the function returns its clone.\n *\n * If the argument is a number, it is treated as a timestamp.\n *\n * If the argument is none of the above, the function returns Invalid Date.\n *\n * **Note**: *all* Date arguments passed to any *date-fns* function is processed by `toDate`.\n *\n * @param {Date|Number} argument - the value to convert\n * @returns {Date} the parsed date in the local time zone\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // Clone the date:\n * const result = toDate(new Date(2014, 1, 11, 11, 30, 30))\n * //=> Tue Feb 11 2014 11:30:30\n *\n * @example\n * // Convert the timestamp to date:\n * const result = toDate(1392098430000)\n * //=> Tue Feb 11 2014 11:30:30\n */\n\nexport default function toDate(argument) {\n  requiredArgs(1, arguments);\n  var argStr = Object.prototype.toString.call(argument); // Clone the date\n\n  if (argument instanceof Date || typeof argument === 'object' && argStr === '[object Date]') {\n    // Prevent the date to lose the milliseconds when passed to new Date() in IE10\n    return new Date(argument.getTime());\n  } else if (typeof argument === 'number' || argStr === '[object Number]') {\n    return new Date(argument);\n  } else {\n    if ((typeof argument === 'string' || argStr === '[object String]') && typeof console !== 'undefined') {\n      // eslint-disable-next-line no-console\n      console.warn(\"Starting with v2.0.0-beta.1 date-fns doesn't accept strings as date arguments. Please use `parseISO` to parse strings. See: https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#string-arguments\"); // eslint-disable-next-line no-console\n\n      console.warn(new Error().stack);\n    }\n\n    return new Date(NaN);\n  }\n}","import toInteger from \"../_lib/toInteger/index.js\";\nimport toDate from \"../toDate/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name addDays\n * @category Day Helpers\n * @summary Add the specified number of days to the given date.\n *\n * @description\n * Add the specified number of days to the given date.\n *\n * @param {Date|Number} date - the date to be changed\n * @param {Number} amount - the amount of days to be added. Positive decimals will be rounded using `Math.floor`, decimals less than zero will be rounded using `Math.ceil`.\n * @returns {Date} - the new date with the days added\n * @throws {TypeError} - 2 arguments required\n *\n * @example\n * // Add 10 days to 1 September 2014:\n * const result = addDays(new Date(2014, 8, 1), 10)\n * //=> Thu Sep 11 2014 00:00:00\n */\n\nexport default function addDays(dirtyDate, dirtyAmount) {\n  requiredArgs(2, arguments);\n  var date = toDate(dirtyDate);\n  var amount = toInteger(dirtyAmount);\n\n  if (isNaN(amount)) {\n    return new Date(NaN);\n  }\n\n  if (!amount) {\n    // If 0 days, no-op to avoid changing times in the hour before end of DST\n    return date;\n  }\n\n  date.setDate(date.getDate() + amount);\n  return date;\n}","import toInteger from \"../_lib/toInteger/index.js\";\nimport toDate from \"../toDate/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name addMonths\n * @category Month Helpers\n * @summary Add the specified number of months to the given date.\n *\n * @description\n * Add the specified number of months to the given date.\n *\n * @param {Date|Number} date - the date to be changed\n * @param {Number} amount - the amount of months to be added. Positive decimals will be rounded using `Math.floor`, decimals less than zero will be rounded using `Math.ceil`.\n * @returns {Date} the new date with the months added\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // Add 5 months to 1 September 2014:\n * const result = addMonths(new Date(2014, 8, 1), 5)\n * //=> Sun Feb 01 2015 00:00:00\n */\n\nexport default function addMonths(dirtyDate, dirtyAmount) {\n  requiredArgs(2, arguments);\n  var date = toDate(dirtyDate);\n  var amount = toInteger(dirtyAmount);\n\n  if (isNaN(amount)) {\n    return new Date(NaN);\n  }\n\n  if (!amount) {\n    // If 0 months, no-op to avoid changing times in the hour before end of DST\n    return date;\n  }\n\n  var dayOfMonth = date.getDate(); // The JS Date object supports date math by accepting out-of-bounds values for\n  // month, day, etc. For example, new Date(2020, 0, 0) returns 31 Dec 2019 and\n  // new Date(2020, 13, 1) returns 1 Feb 2021.  This is *almost* the behavior we\n  // want except that dates will wrap around the end of a month, meaning that\n  // new Date(2020, 13, 31) will return 3 Mar 2021 not 28 Feb 2021 as desired. So\n  // we'll default to the end of the desired month by adding 1 to the desired\n  // month and using a date of 0 to back up one day to the end of the desired\n  // month.\n\n  var endOfDesiredMonth = new Date(date.getTime());\n  endOfDesiredMonth.setMonth(date.getMonth() + amount + 1, 0);\n  var daysInMonth = endOfDesiredMonth.getDate();\n\n  if (dayOfMonth >= daysInMonth) {\n    // If we're already at the end of the month, then this is the correct date\n    // and we're done.\n    return endOfDesiredMonth;\n  } else {\n    // Otherwise, we now know that setting the original day-of-month value won't\n    // cause an overflow, so set the desired day-of-month. Note that we can't\n    // just set the date of `endOfDesiredMonth` because that object may have had\n    // its time changed in the unusual case where where a DST transition was on\n    // the last day of the month and its local time was in the hour skipped or\n    // repeated next to a DST transition.  So we use `date` instead which is\n    // guaranteed to still have the original time.\n    date.setFullYear(endOfDesiredMonth.getFullYear(), endOfDesiredMonth.getMonth(), dayOfMonth);\n    return date;\n  }\n}","var defaultOptions = {};\nexport function getDefaultOptions() {\n  return defaultOptions;\n}\nexport function setDefaultOptions(newOptions) {\n  defaultOptions = newOptions;\n}","import toDate from \"../toDate/index.js\";\nimport toInteger from \"../_lib/toInteger/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\nimport { getDefaultOptions } from \"../_lib/defaultOptions/index.js\";\n/**\n * @name startOfWeek\n * @category Week Helpers\n * @summary Return the start of a week for the given date.\n *\n * @description\n * Return the start of a week for the given date.\n * The result will be in the local timezone.\n *\n * @param {Date|Number} date - the original date\n * @param {Object} [options] - an object with options.\n * @param {Locale} [options.locale=defaultLocale] - the locale object. See [Locale]{@link https://date-fns.org/docs/Locale}\n * @param {0|1|2|3|4|5|6} [options.weekStartsOn=0] - the index of the first day of the week (0 - Sunday)\n * @returns {Date} the start of a week\n * @throws {TypeError} 1 argument required\n * @throws {RangeError} `options.weekStartsOn` must be between 0 and 6\n *\n * @example\n * // The start of a week for 2 September 2014 11:55:00:\n * const result = startOfWeek(new Date(2014, 8, 2, 11, 55, 0))\n * //=> Sun Aug 31 2014 00:00:00\n *\n * @example\n * // If the week starts on Monday, the start of the week for 2 September 2014 11:55:00:\n * const result = startOfWeek(new Date(2014, 8, 2, 11, 55, 0), { weekStartsOn: 1 })\n * //=> Mon Sep 01 2014 00:00:00\n */\n\nexport default function startOfWeek(dirtyDate, options) {\n  var _ref, _ref2, _ref3, _options$weekStartsOn, _options$locale, _options$locale$optio, _defaultOptions$local, _defaultOptions$local2;\n\n  requiredArgs(1, arguments);\n  var defaultOptions = getDefaultOptions();\n  var weekStartsOn = toInteger((_ref = (_ref2 = (_ref3 = (_options$weekStartsOn = options === null || options === void 0 ? void 0 : options.weekStartsOn) !== null && _options$weekStartsOn !== void 0 ? _options$weekStartsOn : options === null || options === void 0 ? void 0 : (_options$locale = options.locale) === null || _options$locale === void 0 ? void 0 : (_options$locale$optio = _options$locale.options) === null || _options$locale$optio === void 0 ? void 0 : _options$locale$optio.weekStartsOn) !== null && _ref3 !== void 0 ? _ref3 : defaultOptions.weekStartsOn) !== null && _ref2 !== void 0 ? _ref2 : (_defaultOptions$local = defaultOptions.locale) === null || _defaultOptions$local === void 0 ? void 0 : (_defaultOptions$local2 = _defaultOptions$local.options) === null || _defaultOptions$local2 === void 0 ? void 0 : _defaultOptions$local2.weekStartsOn) !== null && _ref !== void 0 ? _ref : 0); // Test if weekStartsOn is between 0 and 6 _and_ is not NaN\n\n  if (!(weekStartsOn >= 0 && weekStartsOn <= 6)) {\n    throw new RangeError('weekStartsOn must be between 0 and 6 inclusively');\n  }\n\n  var date = toDate(dirtyDate);\n  var day = date.getDay();\n  var diff = (day < weekStartsOn ? 7 : 0) + day - weekStartsOn;\n  date.setDate(date.getDate() - diff);\n  date.setHours(0, 0, 0, 0);\n  return date;\n}","import toDate from \"../toDate/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name startOfDay\n * @category Day Helpers\n * @summary Return the start of a day for the given date.\n *\n * @description\n * Return the start of a day for the given date.\n * The result will be in the local timezone.\n *\n * @param {Date|Number} date - the original date\n * @returns {Date} the start of a day\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // The start of a day for 2 September 2014 11:55:00:\n * const result = startOfDay(new Date(2014, 8, 2, 11, 55, 0))\n * //=> Tue Sep 02 2014 00:00:00\n */\n\nexport default function startOfDay(dirtyDate) {\n  requiredArgs(1, arguments);\n  var date = toDate(dirtyDate);\n  date.setHours(0, 0, 0, 0);\n  return date;\n}","import toInteger from \"../_lib/toInteger/index.js\";\nimport addDays from \"../addDays/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name addWeeks\n * @category Week Helpers\n * @summary Add the specified number of weeks to the given date.\n *\n * @description\n * Add the specified number of week to the given date.\n *\n * @param {Date|Number} date - the date to be changed\n * @param {Number} amount - the amount of weeks to be added. Positive decimals will be rounded using `Math.floor`, decimals less than zero will be rounded using `Math.ceil`.\n * @returns {Date} the new date with the weeks added\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // Add 4 weeks to 1 September 2014:\n * const result = addWeeks(new Date(2014, 8, 1), 4)\n * //=> Mon Sep 29 2014 00:00:00\n */\n\nexport default function addWeeks(dirtyDate, dirtyAmount) {\n  requiredArgs(2, arguments);\n  var amount = toInteger(dirtyAmount);\n  var days = amount * 7;\n  return addDays(dirtyDate, days);\n}","import toInteger from \"../_lib/toInteger/index.js\";\nimport addMonths from \"../addMonths/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name addYears\n * @category Year Helpers\n * @summary Add the specified number of years to the given date.\n *\n * @description\n * Add the specified number of years to the given date.\n *\n * @param {Date|Number} date - the date to be changed\n * @param {Number} amount - the amount of years to be added. Positive decimals will be rounded using `Math.floor`, decimals less than zero will be rounded using `Math.ceil`.\n * @returns {Date} the new date with the years added\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // Add 5 years to 1 September 2014:\n * const result = addYears(new Date(2014, 8, 1), 5)\n * //=> Sun Sep 01 2019 00:00:00\n */\n\nexport default function addYears(dirtyDate, dirtyAmount) {\n  requiredArgs(2, arguments);\n  var amount = toInteger(dirtyAmount);\n  return addMonths(dirtyDate, amount * 12);\n}","import toDate from \"../toDate/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name endOfMonth\n * @category Month Helpers\n * @summary Return the end of a month for the given date.\n *\n * @description\n * Return the end of a month for the given date.\n * The result will be in the local timezone.\n *\n * @param {Date|Number} date - the original date\n * @returns {Date} the end of a month\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // The end of a month for 2 September 2014 11:55:00:\n * const result = endOfMonth(new Date(2014, 8, 2, 11, 55, 0))\n * //=> Tue Sep 30 2014 23:59:59.999\n */\n\nexport default function endOfMonth(dirtyDate) {\n  requiredArgs(1, arguments);\n  var date = toDate(dirtyDate);\n  var month = date.getMonth();\n  date.setFullYear(date.getFullYear(), month + 1, 0);\n  date.setHours(23, 59, 59, 999);\n  return date;\n}","import toDate from \"../toDate/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name eachDayOfInterval\n * @category Interval Helpers\n * @summary Return the array of dates within the specified time interval.\n *\n * @description\n * Return the array of dates within the specified time interval.\n *\n * @param {Interval} interval - the interval. See [Interval]{@link https://date-fns.org/docs/Interval}\n * @param {Object} [options] - an object with options.\n * @param {Number} [options.step=1] - the step to increment by. The value should be more than 1.\n * @returns {Date[]} the array with starts of days from the day of the interval start to the day of the interval end\n * @throws {TypeError} 1 argument required\n * @throws {RangeError} `options.step` must be a number greater than 1\n * @throws {RangeError} The start of an interval cannot be after its end\n * @throws {RangeError} Date in interval cannot be `Invalid Date`\n *\n * @example\n * // Each day between 6 October 2014 and 10 October 2014:\n * const result = eachDayOfInterval({\n *   start: new Date(2014, 9, 6),\n *   end: new Date(2014, 9, 10)\n * })\n * //=> [\n * //   Mon Oct 06 2014 00:00:00,\n * //   Tue Oct 07 2014 00:00:00,\n * //   Wed Oct 08 2014 00:00:00,\n * //   Thu Oct 09 2014 00:00:00,\n * //   Fri Oct 10 2014 00:00:00\n * // ]\n */\n\nexport default function eachDayOfInterval(dirtyInterval, options) {\n  var _options$step;\n\n  requiredArgs(1, arguments);\n  var interval = dirtyInterval || {};\n  var startDate = toDate(interval.start);\n  var endDate = toDate(interval.end);\n  var endTime = endDate.getTime(); // Throw an exception if start date is after end date or if any date is `Invalid Date`\n\n  if (!(startDate.getTime() <= endTime)) {\n    throw new RangeError('Invalid interval');\n  }\n\n  var dates = [];\n  var currentDate = startDate;\n  currentDate.setHours(0, 0, 0, 0);\n  var step = Number((_options$step = options === null || options === void 0 ? void 0 : options.step) !== null && _options$step !== void 0 ? _options$step : 1);\n  if (step < 1 || isNaN(step)) throw new RangeError('`options.step` must be a number greater than 1');\n\n  while (currentDate.getTime() <= endTime) {\n    dates.push(toDate(currentDate));\n    currentDate.setDate(currentDate.getDate() + step);\n    currentDate.setHours(0, 0, 0, 0);\n  }\n\n  return dates;\n}","import toDate from \"../toDate/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name eachMonthOfInterval\n * @category Interval Helpers\n * @summary Return the array of months within the specified time interval.\n *\n * @description\n * Return the array of months within the specified time interval.\n *\n * @param {Interval} interval - the interval. See [Interval]{@link https://date-fns.org/docs/Interval}\n * @returns {Date[]} the array with starts of months from the month of the interval start to the month of the interval end\n * @throws {TypeError} 1 argument required\n * @throws {RangeError} The start of an interval cannot be after its end\n * @throws {RangeError} Date in interval cannot be `Invalid Date`\n *\n * @example\n * // Each month between 6 February 2014 and 10 August 2014:\n * const result = eachMonthOfInterval({\n *   start: new Date(2014, 1, 6),\n *   end: new Date(2014, 7, 10)\n * })\n * //=> [\n * //   Sat Feb 01 2014 00:00:00,\n * //   Sat Mar 01 2014 00:00:00,\n * //   Tue Apr 01 2014 00:00:00,\n * //   Thu May 01 2014 00:00:00,\n * //   Sun Jun 01 2014 00:00:00,\n * //   Tue Jul 01 2014 00:00:00,\n * //   Fri Aug 01 2014 00:00:00\n * // ]\n */\n\nexport default function eachMonthOfInterval(dirtyInterval) {\n  requiredArgs(1, arguments);\n  var interval = dirtyInterval || {};\n  var startDate = toDate(interval.start);\n  var endDate = toDate(interval.end);\n  var endTime = endDate.getTime();\n  var dates = []; // Throw an exception if start date is after end date or if any date is `Invalid Date`\n\n  if (!(startDate.getTime() <= endTime)) {\n    throw new RangeError('Invalid interval');\n  }\n\n  var currentDate = startDate;\n  currentDate.setHours(0, 0, 0, 0);\n  currentDate.setDate(1);\n\n  while (currentDate.getTime() <= endTime) {\n    dates.push(toDate(currentDate));\n    currentDate.setMonth(currentDate.getMonth() + 1);\n  }\n\n  return dates;\n}","import addWeeks from \"../addWeeks/index.js\";\nimport startOfWeek from \"../startOfWeek/index.js\";\nimport toDate from \"../toDate/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name eachWeekOfInterval\n * @category Interval Helpers\n * @summary Return the array of weeks within the specified time interval.\n *\n * @description\n * Return the array of weeks within the specified time interval.\n *\n * @param {Interval} interval - the interval. See [Interval]{@link https://date-fns.org/docs/Interval}\n * @param {Object} [options] - an object with options.\n * @param {Locale} [options.locale=defaultLocale] - the locale object. See [Locale]{@link https://date-fns.org/docs/Locale}\n * @param {0|1|2|3|4|5|6} [options.weekStartsOn=0] - the index of the first day of the week (0 - Sunday)\n * @returns {Date[]} the array with starts of weeks from the week of the interval start to the week of the interval end\n * @throws {TypeError} 1 argument required\n * @throws {RangeError} `options.weekStartsOn` must be 0, 1, ..., 6\n * @throws {RangeError} The start of an interval cannot be after its end\n * @throws {RangeError} Date in interval cannot be `Invalid Date`\n *\n * @example\n * // Each week within interval 6 October 2014 - 23 November 2014:\n * const result = eachWeekOfInterval({\n *   start: new Date(2014, 9, 6),\n *   end: new Date(2014, 10, 23)\n * })\n * //=> [\n * //   Sun Oct 05 2014 00:00:00,\n * //   Sun Oct 12 2014 00:00:00,\n * //   Sun Oct 19 2014 00:00:00,\n * //   Sun Oct 26 2014 00:00:00,\n * //   Sun Nov 02 2014 00:00:00,\n * //   Sun Nov 09 2014 00:00:00,\n * //   Sun Nov 16 2014 00:00:00,\n * //   Sun Nov 23 2014 00:00:00\n * // ]\n */\n\nexport default function eachWeekOfInterval(dirtyInterval, options) {\n  requiredArgs(1, arguments);\n  var interval = dirtyInterval || {};\n  var startDate = toDate(interval.start);\n  var endDate = toDate(interval.end);\n  var endTime = endDate.getTime(); // Throw an exception if start date is after end date or if any date is `Invalid Date`\n\n  if (!(startDate.getTime() <= endTime)) {\n    throw new RangeError('Invalid interval');\n  }\n\n  var startDateWeek = startOfWeek(startDate, options);\n  var endDateWeek = startOfWeek(endDate, options); // Some timezones switch DST at midnight, making start of day unreliable in these timezones, 3pm is a safe bet\n\n  startDateWeek.setHours(15);\n  endDateWeek.setHours(15);\n  endTime = endDateWeek.getTime();\n  var weeks = [];\n  var currentWeek = startDateWeek;\n\n  while (currentWeek.getTime() <= endTime) {\n    currentWeek.setHours(0);\n    weeks.push(toDate(currentWeek));\n    currentWeek = addWeeks(currentWeek, 1);\n    currentWeek.setHours(15);\n  }\n\n  return weeks;\n}","import toDate from \"../toDate/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name startOfMonth\n * @category Month Helpers\n * @summary Return the start of a month for the given date.\n *\n * @description\n * Return the start of a month for the given date.\n * The result will be in the local timezone.\n *\n * @param {Date|Number} date - the original date\n * @returns {Date} the start of a month\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // The start of a month for 2 September 2014 11:55:00:\n * const result = startOfMonth(new Date(2014, 8, 2, 11, 55, 0))\n * //=> Mon Sep 01 2014 00:00:00\n */\n\nexport default function startOfMonth(dirtyDate) {\n  requiredArgs(1, arguments);\n  var date = toDate(dirtyDate);\n  date.setDate(1);\n  date.setHours(0, 0, 0, 0);\n  return date;\n}","import { getDefaultOptions } from \"../_lib/defaultOptions/index.js\";\nimport toDate from \"../toDate/index.js\";\nimport toInteger from \"../_lib/toInteger/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n\n/**\n * @name endOfWeek\n * @category Week Helpers\n * @summary Return the end of a week for the given date.\n *\n * @description\n * Return the end of a week for the given date.\n * The result will be in the local timezone.\n *\n * @param {Date|Number} date - the original date\n * @param {Object} [options] - an object with options.\n * @param {Locale} [options.locale=defaultLocale] - the locale object. See [Locale]{@link https://date-fns.org/docs/Locale}\n * @param {0|1|2|3|4|5|6} [options.weekStartsOn=0] - the index of the first day of the week (0 - Sunday)\n * @returns {Date} the end of a week\n * @throws {TypeError} 1 argument required\n * @throws {RangeError} `options.weekStartsOn` must be between 0 and 6\n *\n * @example\n * // The end of a week for 2 September 2014 11:55:00:\n * const result = endOfWeek(new Date(2014, 8, 2, 11, 55, 0))\n * //=> Sat Sep 06 2014 23:59:59.999\n *\n * @example\n * // If the week starts on Monday, the end of the week for 2 September 2014 11:55:00:\n * const result = endOfWeek(new Date(2014, 8, 2, 11, 55, 0), { weekStartsOn: 1 })\n * //=> Sun Sep 07 2014 23:59:59.999\n */\nexport default function endOfWeek(dirtyDate, options) {\n  var _ref, _ref2, _ref3, _options$weekStartsOn, _options$locale, _options$locale$optio, _defaultOptions$local, _defaultOptions$local2;\n\n  requiredArgs(1, arguments);\n  var defaultOptions = getDefaultOptions();\n  var weekStartsOn = toInteger((_ref = (_ref2 = (_ref3 = (_options$weekStartsOn = options === null || options === void 0 ? void 0 : options.weekStartsOn) !== null && _options$weekStartsOn !== void 0 ? _options$weekStartsOn : options === null || options === void 0 ? void 0 : (_options$locale = options.locale) === null || _options$locale === void 0 ? void 0 : (_options$locale$optio = _options$locale.options) === null || _options$locale$optio === void 0 ? void 0 : _options$locale$optio.weekStartsOn) !== null && _ref3 !== void 0 ? _ref3 : defaultOptions.weekStartsOn) !== null && _ref2 !== void 0 ? _ref2 : (_defaultOptions$local = defaultOptions.locale) === null || _defaultOptions$local === void 0 ? void 0 : (_defaultOptions$local2 = _defaultOptions$local.options) === null || _defaultOptions$local2 === void 0 ? void 0 : _defaultOptions$local2.weekStartsOn) !== null && _ref !== void 0 ? _ref : 0); // Test if weekStartsOn is between 0 and 6 _and_ is not NaN\n\n  if (!(weekStartsOn >= 0 && weekStartsOn <= 6)) {\n    throw new RangeError('weekStartsOn must be between 0 and 6 inclusively');\n  }\n\n  var date = toDate(dirtyDate);\n  var day = date.getDay();\n  var diff = (day < weekStartsOn ? -7 : 0) + 6 - (day - weekStartsOn);\n  date.setDate(date.getDate() + diff);\n  date.setHours(23, 59, 59, 999);\n  return date;\n}","import toDate from \"../toDate/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name getDaysInMonth\n * @category Month Helpers\n * @summary Get the number of days in a month of the given date.\n *\n * @description\n * Get the number of days in a month of the given date.\n *\n * @param {Date|Number} date - the given date\n * @returns {Number} the number of days in a month\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // How many days are in February 2000?\n * const result = getDaysInMonth(new Date(2000, 1))\n * //=> 29\n */\n\nexport default function getDaysInMonth(dirtyDate) {\n  requiredArgs(1, arguments);\n  var date = toDate(dirtyDate);\n  var year = date.getFullYear();\n  var monthIndex = date.getMonth();\n  var lastDayOfMonth = new Date(0);\n  lastDayOfMonth.setFullYear(year, monthIndex + 1, 0);\n  lastDayOfMonth.setHours(0, 0, 0, 0);\n  return lastDayOfMonth.getDate();\n}","import toDate from \"../toDate/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name isAfter\n * @category Common Helpers\n * @summary Is the first date after the second one?\n *\n * @description\n * Is the first date after the second one?\n *\n * @param {Date|Number} date - the date that should be after the other one to return true\n * @param {Date|Number} dateToCompare - the date to compare with\n * @returns {Boolean} the first date is after the second date\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // Is 10 July 1989 after 11 February 1987?\n * const result = isAfter(new Date(1989, 6, 10), new Date(1987, 1, 11))\n * //=> true\n */\n\nexport default function isAfter(dirtyDate, dirtyDateToCompare) {\n  requiredArgs(2, arguments);\n  var date = toDate(dirtyDate);\n  var dateToCompare = toDate(dirtyDateToCompare);\n  return date.getTime() > dateToCompare.getTime();\n}","import toDate from \"../toDate/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name isBefore\n * @category Common Helpers\n * @summary Is the first date before the second one?\n *\n * @description\n * Is the first date before the second one?\n *\n * @param {Date|Number} date - the date that should be before the other one to return true\n * @param {Date|Number} dateToCompare - the date to compare with\n * @returns {Boolean} the first date is before the second date\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // Is 10 July 1989 before 11 February 1987?\n * const result = isBefore(new Date(1989, 6, 10), new Date(1987, 1, 11))\n * //=> false\n */\n\nexport default function isBefore(dirtyDate, dirtyDateToCompare) {\n  requiredArgs(2, arguments);\n  var date = toDate(dirtyDate);\n  var dateToCompare = toDate(dirtyDateToCompare);\n  return date.getTime() < dateToCompare.getTime();\n}","import toDate from \"../toDate/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name isEqual\n * @category Common Helpers\n * @summary Are the given dates equal?\n *\n * @description\n * Are the given dates equal?\n *\n * @param {Date|Number} dateLeft - the first date to compare\n * @param {Date|Number} dateRight - the second date to compare\n * @returns {Boolean} the dates are equal\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // Are 2 July 2014 06:30:45.000 and 2 July 2014 06:30:45.500 equal?\n * const result = isEqual(\n *   new Date(2014, 6, 2, 6, 30, 45, 0),\n *   new Date(2014, 6, 2, 6, 30, 45, 500)\n * )\n * //=> false\n */\n\nexport default function isEqual(dirtyLeftDate, dirtyRightDate) {\n  requiredArgs(2, arguments);\n  var dateLeft = toDate(dirtyLeftDate);\n  var dateRight = toDate(dirtyRightDate);\n  return dateLeft.getTime() === dateRight.getTime();\n}","import toInteger from \"../_lib/toInteger/index.js\";\nimport toDate from \"../toDate/index.js\";\nimport getDaysInMonth from \"../getDaysInMonth/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name setMonth\n * @category Month Helpers\n * @summary Set the month to the given date.\n *\n * @description\n * Set the month to the given date.\n *\n * @param {Date|Number} date - the date to be changed\n * @param {Number} month - the month of the new date\n * @returns {Date} the new date with the month set\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // Set February to 1 September 2014:\n * const result = setMonth(new Date(2014, 8, 1), 1)\n * //=> Sat Feb 01 2014 00:00:00\n */\n\nexport default function setMonth(dirtyDate, dirtyMonth) {\n  requiredArgs(2, arguments);\n  var date = toDate(dirtyDate);\n  var month = toInteger(dirtyMonth);\n  var year = date.getFullYear();\n  var day = date.getDate();\n  var dateWithDesiredMonth = new Date(0);\n  dateWithDesiredMonth.setFullYear(year, month, 15);\n  dateWithDesiredMonth.setHours(0, 0, 0, 0);\n  var daysInMonth = getDaysInMonth(dateWithDesiredMonth); // Set the last day of the new month\n  // if the original date was the last day of the longer month\n\n  date.setMonth(month, Math.min(day, daysInMonth));\n  return date;\n}","import toDate from \"../toDate/index.js\";\nimport setMonth from \"../setMonth/index.js\";\nimport toInteger from \"../_lib/toInteger/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n\n/**\n * @name set\n * @category Common Helpers\n * @summary Set date values to a given date.\n *\n * @description\n * Set date values to a given date.\n *\n * Sets time values to date from object `values`.\n * A value is not set if it is undefined or null or doesn't exist in `values`.\n *\n * Note about bundle size: `set` does not internally use `setX` functions from date-fns but instead opts\n * to use native `Date#setX` methods. If you use this function, you may not want to include the\n * other `setX` functions that date-fns provides if you are concerned about the bundle size.\n *\n * @param {Date|Number} date - the date to be changed\n * @param {Object} values - an object with options\n * @param {Number} [values.year] - the number of years to be set\n * @param {Number} [values.month] - the number of months to be set\n * @param {Number} [values.date] - the number of days to be set\n * @param {Number} [values.hours] - the number of hours to be set\n * @param {Number} [values.minutes] - the number of minutes to be set\n * @param {Number} [values.seconds] - the number of seconds to be set\n * @param {Number} [values.milliseconds] - the number of milliseconds to be set\n * @returns {Date} the new date with options set\n * @throws {TypeError} 2 arguments required\n * @throws {RangeError} `values` must be an object\n *\n * @example\n * // Transform 1 September 2014 into 20 October 2015 in a single line:\n * const result = set(new Date(2014, 8, 20), { year: 2015, month: 9, date: 20 })\n * //=> Tue Oct 20 2015 00:00:00\n *\n * @example\n * // Set 12 PM to 1 September 2014 01:23:45 to 1 September 2014 12:00:00:\n * const result = set(new Date(2014, 8, 1, 1, 23, 45), { hours: 12 })\n * //=> Mon Sep 01 2014 12:23:45\n */\nexport default function set(dirtyDate, values) {\n  requiredArgs(2, arguments);\n\n  if (typeof values !== 'object' || values === null) {\n    throw new RangeError('values parameter must be an object');\n  }\n\n  var date = toDate(dirtyDate); // Check if date is Invalid Date because Date.prototype.setFullYear ignores the value of Invalid Date\n\n  if (isNaN(date.getTime())) {\n    return new Date(NaN);\n  }\n\n  if (values.year != null) {\n    date.setFullYear(values.year);\n  }\n\n  if (values.month != null) {\n    date = setMonth(date, values.month);\n  }\n\n  if (values.date != null) {\n    date.setDate(toInteger(values.date));\n  }\n\n  if (values.hours != null) {\n    date.setHours(toInteger(values.hours));\n  }\n\n  if (values.minutes != null) {\n    date.setMinutes(toInteger(values.minutes));\n  }\n\n  if (values.seconds != null) {\n    date.setSeconds(toInteger(values.seconds));\n  }\n\n  if (values.milliseconds != null) {\n    date.setMilliseconds(toInteger(values.milliseconds));\n  }\n\n  return date;\n}","import toInteger from \"../_lib/toInteger/index.js\";\nimport toDate from \"../toDate/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name setYear\n * @category Year Helpers\n * @summary Set the year to the given date.\n *\n * @description\n * Set the year to the given date.\n *\n * @param {Date|Number} date - the date to be changed\n * @param {Number} year - the year of the new date\n * @returns {Date} the new date with the year set\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // Set year 2013 to 1 September 2014:\n * const result = setYear(new Date(2014, 8, 1), 2013)\n * //=> Sun Sep 01 2013 00:00:00\n */\n\nexport default function setYear(dirtyDate, dirtyYear) {\n  requiredArgs(2, arguments);\n  var date = toDate(dirtyDate);\n  var year = toInteger(dirtyYear); // Check if date is Invalid Date because Date.prototype.setFullYear ignores the value of Invalid Date\n\n  if (isNaN(date.getTime())) {\n    return new Date(NaN);\n  }\n\n  date.setFullYear(year);\n  return date;\n}","import startOfDay from \"../startOfDay/index.js\";\n/**\n * @name startOfToday\n * @category Day Helpers\n * @summary Return the start of today.\n * @pure false\n *\n * @description\n * Return the start of today.\n *\n * > ⚠️ Please note that this function is not present in the FP submodule as\n * > it uses `Date.now()` internally hence impure and can't be safely curried.\n *\n * @returns {Date} the start of today\n *\n * @example\n * // If today is 6 October 2014:\n * const result = startOfToday()\n * //=> Mon Oct 6 2014 00:00:00\n */\n\nexport default function startOfToday() {\n  return startOfDay(Date.now());\n}","import toInteger from \"../_lib/toInteger/index.js\";\nimport addMonths from \"../addMonths/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name subMonths\n * @category Month Helpers\n * @summary Subtract the specified number of months from the given date.\n *\n * @description\n * Subtract the specified number of months from the given date.\n *\n * @param {Date|Number} date - the date to be changed\n * @param {Number} amount - the amount of months to be subtracted. Positive decimals will be rounded using `Math.floor`, decimals less than zero will be rounded using `Math.ceil`.\n * @returns {Date} the new date with the months subtracted\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // Subtract 5 months from 1 February 2015:\n * const result = subMonths(new Date(2015, 1, 1), 5)\n * //=> Mon Sep 01 2014 00:00:00\n */\n\nexport default function subMonths(dirtyDate, dirtyAmount) {\n  requiredArgs(2, arguments);\n  var amount = toInteger(dirtyAmount);\n  return addMonths(dirtyDate, -amount);\n}","import toInteger from \"../_lib/toInteger/index.js\";\nimport addYears from \"../addYears/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name subYears\n * @category Year Helpers\n * @summary Subtract the specified number of years from the given date.\n *\n * @description\n * Subtract the specified number of years from the given date.\n *\n * @param {Date|Number} date - the date to be changed\n * @param {Number} amount - the amount of years to be subtracted. Positive decimals will be rounded using `Math.floor`, decimals less than zero will be rounded using `Math.ceil`.\n * @returns {Date} the new date with the years subtracted\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // Subtract 5 years from 1 September 2014:\n * const result = subYears(new Date(2014, 8, 1), 5)\n * //=> Tue Sep 01 2009 00:00:00\n */\n\nexport default function subYears(dirtyDate, dirtyAmount) {\n  requiredArgs(2, arguments);\n  var amount = toInteger(dirtyAmount);\n  return addYears(dirtyDate, -amount);\n}","import {\n  addMonths,\n  addYears,\n  eachDayOfInterval,\n  eachMonthOfInterval,\n  eachWeekOfInterval,\n  endOfMonth,\n  endOfWeek,\n  isAfter,\n  isBefore,\n  isEqual,\n  set,\n  setMonth,\n  setYear,\n  startOfMonth,\n  startOfToday,\n  startOfWeek,\n  subMonths,\n  subYears,\n} from \"date-fns\";\nimport { useCallback, useMemo, useState } from \"react\";\n\nexport enum Month {\n  JANUARY,\n  FEBRUARY,\n  MARCH,\n  APRIL,\n  MAY,\n  JUNE,\n  JULY,\n  AUGUST,\n  SEPTEMBER,\n  OCTOBER,\n  NOVEMBER,\n  DECEMBER,\n}\n\nexport enum Day {\n  SUNDAY,\n  MONDAY,\n  TUESDAY,\n  WEDNESDAY,\n  THURSDAY,\n  FRIDAY,\n  SATURDAY,\n}\n\nexport interface Options {\n  /**\n   * What day a week starts on within the calendar matrix.\n   *\n   * @default Day.SUNDAY\n   */\n  weekStartsOn?: Day;\n\n  /**\n   * The initial viewing date.\n   *\n   * @default new Date()\n   */\n  viewing?: Date;\n\n  /**\n   * The initial date(s) selection.\n   *\n   * @default []\n   */\n  selected?: Date[];\n\n  /**\n   * The number of months in the calendar.\n   *\n   * @default 1\n   */\n  numberOfMonths?: number;\n}\n\nexport interface Returns {\n  /**\n   * Returns a copy of the given date with the time set to 00:00:00:00.\n   */\n  clearTime: (date: Date) => Date;\n\n  /**\n   * Returns whether or not a date is between 2 other dates (inclusive).\n   */\n  inRange: (date: Date, min: Date, max: Date) => boolean;\n\n  /**\n   * The date represented in the calendar matrix. Note that\n   * the month and year are the only parts used.\n   */\n  viewing: Date;\n\n  /**\n   * Set the date represented in the calendar matrix. Note that\n   * the month and year are the only parts used.\n   */\n  setViewing: React.Dispatch<React.SetStateAction<Date>>;\n\n  /**\n   * Set the viewing date to today.\n   */\n  viewToday: () => void;\n\n  /**\n   * Set the viewing date to the given month.\n   */\n  viewMonth: (month: Month) => void;\n\n  /**\n   * Set the viewing date to the month before the current.\n   */\n  viewPreviousMonth: () => void;\n\n  /**\n   * Set the viewing date to the month after the current.\n   */\n  viewNextMonth: () => void;\n\n  /**\n   * Set the viewing date to the given year.\n   */\n  viewYear: (year: number) => void;\n\n  /**\n   * Set the viewing date to the year before the current.\n   */\n  viewPreviousYear: () => void;\n\n  /**\n   * Set the viewing date to the year after the current.\n   */\n  viewNextYear: () => void;\n\n  /**\n   * The dates currently selected.\n   */\n  selected: Date[];\n\n  /**\n   * Override the currently selected dates.\n   */\n  setSelected: React.Dispatch<React.SetStateAction<Date[]>>;\n\n  /**\n   * Reset the selected dates to [].\n   */\n  clearSelected: () => void;\n\n  /**\n   * Determine whether or not a date has been selected.\n   */\n  isSelected: (date: Date) => boolean;\n\n  /**\n   * Select one or more dates.\n   */\n  select: (date: Date | Date[], replaceExisting?: boolean) => void;\n\n  /**\n   * Deselect one or more dates.\n   */\n  deselect: (date: Date | Date[]) => void;\n\n  /**\n   * Toggle the selection of a date.\n   */\n  toggle: (date: Date, replaceExisting?: boolean) => void;\n\n  /**\n   * Select a range of dates (inclusive).\n   */\n  selectRange: (start: Date, end: Date, replaceExisting?: boolean) => void;\n\n  /**\n   * Deselect a range of dates (inclusive).\n   */\n  deselectRange: (start: Date, end: Date) => void;\n\n  /**\n   * A matrix of days based on the current viewing date.\n   */\n  calendar: Date[][][];\n}\n\nconst inRange = (date: Date, min: Date, max: Date) =>\n  (isEqual(date, min) || isAfter(date, min)) && (isEqual(date, max) || isBefore(date, max));\n\nconst clearTime = (date: Date) => set(date, { hours: 0, minutes: 0, seconds: 0, milliseconds: 0 });\n\nexport const useLilius = ({\n  weekStartsOn = Day.SUNDAY,\n  viewing: initialViewing = new Date(),\n  selected: initialSelected = [],\n  numberOfMonths = 1,\n}: Options = {}): Returns => {\n  const [viewing, setViewing] = useState<Date>(initialViewing);\n\n  const viewToday = useCallback(() => setViewing(startOfToday()), [setViewing]);\n\n  const viewMonth = useCallback((month: Month) => setViewing((v) => setMonth(v, month)), []);\n\n  const viewPreviousMonth = useCallback(() => setViewing((v) => subMonths(v, 1)), []);\n\n  const viewNextMonth = useCallback(() => setViewing((v) => addMonths(v, 1)), []);\n\n  const viewYear = useCallback((year: number) => setViewing((v) => setYear(v, year)), []);\n\n  const viewPreviousYear = useCallback(() => setViewing((v) => subYears(v, 1)), []);\n\n  const viewNextYear = useCallback(() => setViewing((v) => addYears(v, 1)), []);\n\n  const [selected, setSelected] = useState<Date[]>(initialSelected.map(clearTime));\n\n  const clearSelected = () => setSelected([]);\n\n  const isSelected = useCallback((date: Date) => selected.findIndex((s) => isEqual(s, date)) > -1, [selected]);\n\n  const select = useCallback((date: Date | Date[], replaceExisting?: boolean) => {\n    if (replaceExisting) {\n      setSelected(Array.isArray(date) ? date : [date]);\n    } else {\n      setSelected((selectedItems) => selectedItems.concat(Array.isArray(date) ? date : [date]));\n    }\n  }, []);\n\n  const deselect = useCallback(\n    (date: Date | Date[]) =>\n      setSelected((selectedItems) =>\n        Array.isArray(date)\n          ? selectedItems.filter((s) => !date.map((d) => d.getTime()).includes(s.getTime()))\n          : selectedItems.filter((s) => !isEqual(s, date)),\n      ),\n    [],\n  );\n\n  const toggle = useCallback(\n    (date: Date, replaceExisting?: boolean) => (isSelected(date) ? deselect(date) : select(date, replaceExisting)),\n    [deselect, isSelected, select],\n  );\n\n  const selectRange = useCallback((start: Date, end: Date, replaceExisting?: boolean) => {\n    if (replaceExisting) {\n      setSelected(eachDayOfInterval({ start, end }));\n    } else {\n      setSelected((selectedItems) => selectedItems.concat(eachDayOfInterval({ start, end })));\n    }\n  }, []);\n\n  const deselectRange = useCallback((start: Date, end: Date) => {\n    setSelected((selectedItems) =>\n      selectedItems.filter(\n        (s) =>\n          !eachDayOfInterval({ start, end })\n            .map((d) => d.getTime())\n            .includes(s.getTime()),\n      ),\n    );\n  }, []);\n\n  const calendar = useMemo<Date[][][]>(\n    () =>\n      eachMonthOfInterval({\n        start: startOfMonth(viewing),\n        end: endOfMonth(addMonths(viewing, numberOfMonths - 1)),\n      }).map((month) =>\n        eachWeekOfInterval(\n          {\n            start: startOfMonth(month),\n            end: endOfMonth(month),\n          },\n          { weekStartsOn },\n        ).map((week) =>\n          eachDayOfInterval({\n            start: startOfWeek(week, { weekStartsOn }),\n            end: endOfWeek(week, { weekStartsOn }),\n          }),\n        ),\n      ),\n    [viewing, weekStartsOn, numberOfMonths],\n  );\n\n  return {\n    clearTime,\n    inRange,\n    viewing,\n    setViewing,\n    viewToday,\n    viewMonth,\n    viewPreviousMonth,\n    viewNextMonth,\n    viewYear,\n    viewPreviousYear,\n    viewNextYear,\n    selected,\n    setSelected,\n    clearSelected,\n    isSelected,\n    select,\n    deselect,\n    toggle,\n    selectRange,\n    deselectRange,\n    calendar,\n  };\n};\n"]},"metadata":{},"sourceType":"module"}